(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{472:function(e,t,s){"use strict";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[e._v("#")]),e._v(" react")]),e._v(" "),s("h2",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[e._v("#")]),e._v(" 基础知识")]),e._v(" "),s("p",[e._v("React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。")]),e._v(" "),s("p",[e._v("组件、props 和 state")]),e._v(" "),s("h3",{attrs:{id:"组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[e._v("#")]),e._v(" 组件")]),e._v(" "),s("p",[e._v("一个组件接收一些参数，我们把这些参数叫做 "),s("code",[e._v("props")]),e._v("（“props” 是 “properties” 简写），然后通过 "),s("code",[e._v("render")]),e._v(" 方法返回需要展示在屏幕上的视图的层次结构。")]),e._v(" "),s("h4",{attrs:{id:"简单组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单组件"}},[e._v("#")]),e._v(" 简单组件")]),e._v(" "),s("p",[e._v("用一个名为 "),s("code",[e._v("render()")]),e._v(" 的方法，接收输入的数据并返回需要展示的内容。"),s("code",[e._v("render")]),e._v(" 返回了一个 "),s("strong",[e._v("React 元素")]),e._v("，这是一种对渲染内容的轻量级描述。在示例中这种类似 XML 的写法被称为 JSX。被传入的数据可在组件中通过 "),s("code",[e._v("this.props")]),e._v(" 在 "),s("code",[e._v("render()")]),e._v(" 访问。会被编译成 React.createElement('div')")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('root')\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("h4",{attrs:{id:"有状态组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有状态组件"}},[e._v("#")]),e._v(" 有状态组件")]),e._v(" "),s("p",[e._v("除了使用外部数据（通过 "),s("code",[e._v("this.props")]),e._v(" 访问）以外，组件还可以维护其内部的状态数据（通过 "),s("code",[e._v("this.state")]),e._v(" 访问）。当组件的状态数据改变时，组件会再次调用 "),s("code",[e._v("render()")]),e._v(" 方法重新渲染对应的标记。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])]),s("h4",{attrs:{id:"函数组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组件"}},[e._v("#")]),e._v(" 函数组件")]),e._v(" "),s("p",[e._v("定义一个函数，这个函数接收 "),s("code",[e._v("props")]),e._v(" 作为参数，然后返回需要渲染的元素。函数组件写起来并不像 class 组件那么繁琐，很多组件都可以使用函数组件来写。组件只包含一个 "),s("code",[e._v("render")]),e._v(" 方法，并且不包含 state。")]),e._v(" "),s("h3",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("constructor")]),e._v("：函数组件不需要构造函数。你可以通过调用 "),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-reference.html#usestate",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("useState")]),s("OutboundLink")],1),e._v(" 来初始化 state。如果计算的代价比较昂贵，你可以传一个函数给 "),s("code",[e._v("useState")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("getDerivedStateFromProps")]),e._v("：改为 "),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops",target:"_blank",rel:"noopener noreferrer"}},[e._v("在渲染时"),s("OutboundLink")],1),e._v(" 安排一次更新。")]),e._v(" "),s("li",[s("code",[e._v("shouldComponentUpdate")]),e._v("：详见 "),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate",target:"_blank",rel:"noopener noreferrer"}},[e._v("下方"),s("OutboundLink")],1),e._v(" "),s("code",[e._v("React.memo")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("render")]),e._v("：这是函数组件体本身。")]),e._v(" "),s("li",[s("code",[e._v("componentDidMount")]),e._v(", "),s("code",[e._v("componentDidUpdate")]),e._v(", "),s("code",[e._v("componentWillUnmount")]),e._v("："),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-reference.html#useeffect",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("useEffect")]),e._v(" Hook"),s("OutboundLink")],1),e._v(" 可以表达所有这些(包括 "),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-faq.html#can-i-skip-an-effect-on-updates",target:"_blank",rel:"noopener noreferrer"}},[e._v("不那么"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://react.docschina.org/docs/hooks-faq.html#can-i-run-an-effect-only-on-updates",target:"_blank",rel:"noopener noreferrer"}},[e._v("常见"),s("OutboundLink")],1),e._v(" 的场景)的组合。")]),e._v(" "),s("li",[s("code",[e._v("getSnapshotBeforeUpdate")]),e._v("，"),s("code",[e._v("componentDidCatch")]),e._v(" 以及 "),s("code",[e._v("getDerivedStateFromError")]),e._v("：目前还没有这些方法的 Hook 等价写法，但很快会被添加。")])]),e._v(" "),s("h2",{attrs:{id:"路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),s("p",[e._v("react-router-dom")]),e._v(" "),s("p",[e._v("路由的三个核心组件：Router / Route / Link")]),e._v(" "),s("p",[e._v("使用 Router 组件包裹整个应用（重要）")]),e._v(" "),s("p",[e._v("使用 Link 组件作为导航菜单（路由入口）")]),e._v(" "),s("p",[e._v("import { BrowserRouter as Router, Route, Link } from 'react-router-dom'")]),e._v(" "),s("h3",{attrs:{id:"路由browserrouter、hashhistory路由模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由browserrouter、hashhistory路由模式"}},[e._v("#")]),e._v(" 路由BrowserRouter、HashHistory路由模式")]),e._v(" "),s("h3",{attrs:{id:"router属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#router属性"}},[e._v("#")]),e._v(" Router属性")]),e._v(" "),s("ul",[s("li",[e._v("exact：路径和根目录/精确匹配")]),e._v(" "),s("li",[e._v("Switch：匹配一个后停止匹配")]),e._v(" "),s("li",[e._v("component:表示路径对应显示的组件")]),e._v(" "),s("li",[e._v("path（string）: 路由匹配路径。（没有path属性的Route 总是会 匹配）")])]),e._v(" "),s("h3",{attrs:{id:"link"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[e._v("#")]),e._v(" Link")]),e._v(" "),s("h3",{attrs:{id:"route"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[e._v("#")]),e._v(" Route")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<Route path="/login" component={Login}></Route>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"switch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[e._v("#")]),e._v(" Switch")]),e._v(" "),s("p",[e._v("Switch匹配到第一个路由就不会继续匹配了,如果不加Route 里不加 exact，那么凡是Link里面 to 的路径包含了/，那么就会被匹配到，于是Switch就不继续匹配下去。")]),e._v(" "),s("h3",{attrs:{id:"重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[e._v("#")]),e._v(" 重定向")]),e._v(" "),s("p",[e._v("需要导入 Redirect")]),e._v(" "),s("div",{staticClass:"language-react line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/* 重定向 */\n<Redirect from={match.url} to={match.url + "/comm"} />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"路由传参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由传参"}},[e._v("#")]),e._v(" 路由传参")]),e._v(" "),s("p",[e._v("路由组件的props参数是一个对象，包含了history,location,match三个属性")]),e._v(" "),s("ul",[s("li",[e._v("history包含了路由的跳转方法")]),e._v(" "),s("li",[e._v("location包含了路由信息")]),e._v(" "),s("li",[e._v("match包含了配置的地址和路由参数")])]),e._v(" "),s("h3",{attrs:{id:"路由嵌套"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由嵌套"}},[e._v("#")]),e._v(" 路由嵌套")]),e._v(" "),s("h3",{attrs:{id:"让非路由组件具有-路由props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让非路由组件具有-路由props"}},[e._v("#")]),e._v(" 让非路由组件具有 路由props")]),e._v(" "),s("p",[e._v("WithRouter 让非路由组件具有 路由props")]),e._v(" "),s("div",{staticClass:"language-react line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mport {withRouter} from 'react-router-dom'\nexport default withRouter(Child);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"状态管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态管理"}},[e._v("#")]),e._v(" 状态管理")]),e._v(" "),s("p",[e._v("react-redux是react官方推出的 用于配合React绑定库")]),e._v(" "),s("p",[e._v("React-redux能够使你的React组件从React Store中很方便的读取数据，并且向store中分发actions 以此来更新数据")]),e._v(" "),s("h5",{attrs:{id:"react-redux中两个重要成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-redux中两个重要成员"}},[e._v("#")]),e._v(" React-Redux中两个重要成员")]),e._v(" "),s("ul",[s("li",[e._v("Provider 这个"),s("em",[e._v("组件")]),e._v(" 能够使整个app都能获取到store中的数据")]),e._v(" "),s("li",[e._v("connect 这个"),s("em",[e._v("方法")]),e._v(" 能够使组件跟store来进行关联")])]),e._v(" "),s("p",[s("strong",[e._v("Redux")]),e._v(":是一个用于管理组件公共状态的一个可预测状态的框架,集中管理组件的状态."),s("strong",[e._v("核心在于store,它提供了dispatch,getState,subscribe方法")])]),e._v(" "),s("p",[s("strong",[e._v("如果只是使用Redux,那么流程是这样的:")])]),e._v(" "),s("ul",[s("li",[e._v("component--\x3edispatch(action)--\x3ereducer--\x3esubscribe--\x3egetState--\x3ecomponent 这在前几篇的内容,一直都是遵循这个流程")])]),e._v(" "),s("p",[s("strong",[e._v("如果使用react-redux,那么流程是这样的")]),e._v(":")]),e._v(" "),s("ul",[s("li",[e._v("component--\x3eactionCreator(data)--\x3ereducer--\x3ecomponent")])])])}),[],!1,null,null,null);t.default=r.exports}}]);