(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{444:function(s,t,e){"use strict";e.r(t);var a=e(42),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),e("p",[s._v("Promise 是异步编程的一种解决方案。所谓"),e("code",[s._v("Promise")]),s._v("，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。")]),s._v(" "),e("p",[s._v("有了"),e("code",[s._v("Promise")]),s._v("对象，")]),s._v(" "),e("ol",[e("li",[s._v("就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。")]),s._v(" "),e("li",[s._v("此外，"),e("code",[s._v("Promise")]),s._v("对象提供统一的接口，使得控制异步操作更加容易。")])]),s._v(" "),e("p",[e("code",[s._v("Promise")]),s._v("也有一些缺点。")]),s._v(" "),e("ol",[e("li",[s._v("首先，无法取消"),e("code",[s._v("Promise")]),s._v("，一旦新建它就会立即执行，无法中途取消。")]),s._v(" "),e("li",[s._v("其次，如果不设置回调函数，"),e("code",[s._v("Promise")]),s._v("内部抛出的错误，不会反应到外部。")]),s._v(" "),e("li",[s._v("最后，当处于"),e("code",[s._v("pending")]),s._v("状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")])]),s._v(" "),e("h2",{attrs:{id:"基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[s._v("#")]),s._v(" 基本用法")]),s._v(" "),e("p",[s._v("ES6 规定，"),e("code",[s._v("Promise")]),s._v("对象是一个构造函数，用来生成"),e("code",[s._v("Promise")]),s._v("实例。"),e("code",[s._v("Promise")]),s._v("构造函数接受一个函数作为参数，该函数的两个参数分别是"),e("code",[s._v("resolve")]),s._v("和"),e("code",[s._v("reject")]),s._v("。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。"),e("code",[s._v("resolve")]),s._v("函数的作用是，将"),e("code",[s._v("Promise")]),s._v("对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；"),e("code",[s._v("reject")]),s._v("函数的作用是，将"),e("code",[s._v("Promise")]),s._v("对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" promise "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ... some code")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 异步操作成功 */")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h2",{attrs:{id:"promise-prototype-then"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-then"}},[s._v("#")]),s._v(" Promise.prototype.then()")]),s._v(" "),e("p",[s._v("Promise 实例具有"),e("code",[s._v("then")]),s._v("方法，也就是说，"),e("code",[s._v("then")]),s._v("方法是定义在原型对象"),e("code",[s._v("Promise.prototype")]),s._v("上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，"),e("code",[s._v("then")]),s._v("方法的第一个参数是"),e("code",[s._v("resolved")]),s._v("状态的回调函数，第二个参数（可选）是"),e("code",[s._v("rejected")]),s._v("状态的回调函数。")]),s._v(" "),e("p",[e("code",[s._v("then")]),s._v("方法返回的是一个新的"),e("code",[s._v("Promise")]),s._v("实例（注意，不是原来那个"),e("code",[s._v("Promise")]),s._v("实例）。因此可以采用链式写法，即"),e("code",[s._v("then")]),s._v("方法后面再调用另一个"),e("code",[s._v("then")]),s._v("方法。")]),s._v(" "),e("h2",{attrs:{id:"promise-prototype-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-catch"}},[s._v("#")]),s._v(" Promise.prototype.catch()")]),s._v(" "),e("p",[e("code",[s._v("Promise.prototype.catch()")]),s._v("方法是"),e("code",[s._v(".then(null, rejection)")]),s._v("或"),e("code",[s._v(".then(undefined, rejection)")]),s._v("的别名，用于指定发生错误时的回调函数。"),e("code",[s._v("catch()")]),s._v("方法返回的还是一个 Promise 对象，因此后面还可以接着调用"),e("code",[s._v("then()")]),s._v("方法。")]),s._v(" "),e("h2",{attrs:{id:"promise-prototype-finally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-finally"}},[s._v("#")]),s._v(" Promise.prototype.finally()")]),s._v(" "),e("p",[e("code",[s._v("finally()")]),s._v("方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。"),e("code",[s._v("finally")]),s._v("方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。")]),s._v(" "),e("h2",{attrs:{id:"promise-all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[s._v("#")]),s._v(" Promise.all()")]),s._v(" "),e("p",[e("code",[s._v("Promise.all()")]),s._v("方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。")]),s._v(" "),e("h2",{attrs:{id:"promise-race"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[s._v("#")]),s._v(" Promise.race()")]),s._v(" "),e("p",[e("code",[s._v("Promise.race()")]),s._v("方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),s._v(" "),e("h2",{attrs:{id:"promise-allsettled"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled"}},[s._v("#")]),s._v(" Promise.allSettled()")]),s._v(" "),e("p",[e("code",[s._v("Promise.allSettled()")]),s._v("方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是"),e("code",[s._v("fulfilled")]),s._v("还是"),e("code",[s._v("rejected")]),s._v("，包装实例才会结束。")]),s._v(" "),e("h2",{attrs:{id:"promise-any"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-any"}},[s._v("#")]),s._v(" Promise.any()")]),s._v(" "),e("p",[s._v("ES2021 引入了"),e("a",{attrs:{href:"https://github.com/tc39/proposal-promise-any",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("Promise.any()")]),s._v("方法"),e("OutboundLink")],1),s._v("。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。只要参数实例有一个变成"),e("code",[s._v("fulfilled")]),s._v("状态，包装实例就会变成"),e("code",[s._v("fulfilled")]),s._v("状态；如果所有参数实例都变成"),e("code",[s._v("rejected")]),s._v("状态，包装实例就会变成"),e("code",[s._v("rejected")]),s._v("状态。")]),s._v(" "),e("p",[e("code",[s._v("Promise.any()")]),s._v("跟"),e("code",[s._v("Promise.race()")]),s._v("方法很像，只有一点不同，就是不会因为某个 Promise 变成"),e("code",[s._v("rejected")]),s._v("状态而结束。")]),s._v(" "),e("h2",{attrs:{id:"promise-resolve"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-resolve"}},[s._v("#")]),s._v(" Promise.resolve()")]),s._v(" "),e("p",[e("code",[s._v("Promise.resolve()")]),s._v("方法，将现有对象转为 Promise 对象，")]),s._v(" "),e("p",[e("code",[s._v("Promise.resolve()")]),s._v("等价于下面的写法。")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"promise-reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-reject"}},[s._v("#")]),s._v(" Promise.reject()")]),s._v(" "),e("p",[e("code",[s._v("Promise.reject(reason)")]),s._v("方法也会返回一个新的 Promise 实例，该实例的状态为"),e("code",[s._v("rejected")]),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"promise-try"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-try"}},[s._v("#")]),s._v(" Promise.try()")]),s._v(" "),e("p",[e("code",[s._v("Promise.try")]),s._v("就是模拟"),e("code",[s._v("try")]),s._v("代码块")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("try")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" userId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以统一用promise.catch()捕获所有同步和异步的错误。")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);