(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{377:function(e,t,n){"use strict";n.r(t);var s=n(42),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"什么是自动化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是自动化"}},[e._v("#")]),e._v(" 什么是自动化")]),e._v(" "),n("p",[n("strong",[e._v("在软件开发中更是如此，大家为了“变懒”，使自动化测试、自动化部署、自动化构建等类型的工具层出不穷，从而让我们更加专注软件的质量，提高软件的生命周期。")])]),e._v(" "),n("h2",{attrs:{id:"ci-cd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd"}},[e._v("#")]),e._v(" CI/CD")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200912161127421.png#pic_center",alt:"在这里插入图片描述"}})]),e._v(" "),n("h4",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),n("p",[e._v("CI/CD包含了"),n("code",[e._v("Continuous Integration（持续集成）")]),e._v(" 、"),n("code",[e._v("Continuous Delivery（持续交付）")]),e._v("、"),n("code",[e._v("Continuous Deployment（持续部署）")]),e._v("三个核心流程，也可以称为CI/CD的"),n("code",[e._v("pipeline（管线)")]),e._v("。它是敏捷开发中的一个最佳实践，使软件开发团队能够专注于满足业务需求，代码质量和安全性。")]),e._v(" "),n("h4",{attrs:{id:"使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("下面我来描述一个简单工作场景让大家理解这个流程：")]),e._v(" "),n("p",[e._v("A和B是某项目组的开发人员，D是运维人员。A开发完成了一个登录功能，完成后就推送到远程的dev分支，与此同时B也开发完了一个购物车功能也推送了远程的dev分支，A和B想看看线上环境功能是否正常，于是让D去发布一个线上的测试版本，于是他按项目要求安装环境然后进行一些配置发布，这下A和B终于看到了线上的代码了，于是它们决定放到线上环境，然后D同学又开始一顿环境配置，结果很不幸出现了Bug，然后A和B改Bug，交给D继续重复流程…😭")]),e._v(" "),n("p",[e._v("后来甲方爸爸催得紧需要查看功能，不得已项目工期只能缩短了，而大家开发进度实在是太忙了，A和B没办法开发“CV”操作，bug层出不穷…后来他们决定换一个方式：")]),e._v(" "),n("p",[e._v("A和B继续开发功能，但是开始使用自动化测试工具来测试它们的功能。而D先在公司内部用搭建了Jenkins平台，然后加了一些运维脚本把要干的操作全写好了，也为不同环境编写了不同的脚本。A和B推送后，Jenkins这边自动拉取仓库代码，然后执行脚本开始构建docker镜像并创建容器来运行代码，过了一会儿，A和B刷新页面一看终于看到了功能，这时候甲方爸爸也看到了功能，终于算是放心了，今后A和B更加专注功能和业务实现了，bug也少了，而D自从用了Docker再也不用担心环境问题了，也不用手动去做哪些操作了，从而增加了“摸鱼”时间…（以上纯属瞎造）😂")]),e._v(" "),n("p",[e._v("从上面的过程我们可以看到，A和B一直给项目集成功能，然后用自动化测试并且持续推送远程仓库，这个过程就是"),n("code",[e._v("Continuous Integration（持续集成）")]),e._v("，更加准确点说应该是这样：")]),e._v(" "),n("blockquote",[n("p",[e._v("持续集成（CI）可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或“主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。")])]),e._v(" "),n("p",[e._v("而D用Jenkins发布的测试环境版本，其实就是一个"),n("code",[e._v("Continuous Delivery（持续交付)")]),e._v("过程，将A和B开发的功能和自动化测试案例发布在测试环境中进行软件质量评估。这个流程可以验证项目不同阶段的成果，并且降低软件风险。")]),e._v(" "),n("p",[e._v("而"),n("code",[e._v("Continuous Deployment（持续部署)")]),e._v("在前一个的流程上发布的生成环境版本，甲方爸爸以及普通用户可以看到你的成果，可以体验你的功能。")]),e._v(" "),n("p",[e._v("实际上从开发完成到部署上线这一个流程时间花的很少很少，这就是CI/CD的魅力所在，在如今产品疯狂迭代的今天，谁的功能发布的越快越好越能吸引用户，所以站在用户的角度来说，增多了用户的留存率，而对于开发和运维来说这更是一个敏捷开发的最佳实践。")]),e._v(" "),n("p",[e._v("总结来说，docker解决了环境不统以及手动配置的效率低下的问题。")]),e._v(" "),n("h2",{attrs:{id:"安装jenkins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装jenkins"}},[e._v("#")]),e._v(" 安装jenkins")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run --name jenkins_node -d -v C:\\jenkins_home:/var/jenkins_home -p 8081:8080 -p 50000:50000 jenkins/jenkins:lts\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])])])}),[],!1,null,null,null);t.default=v.exports}}]);