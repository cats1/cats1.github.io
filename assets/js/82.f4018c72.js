(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{448:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[s._v("#")]),s._v(" js")]),s._v(" "),a("h2",{attrs:{id:"输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出"}},[s._v("#")]),s._v(" 输出")]),s._v(" "),a("ul",[a("li",[s._v("使用 window.alert() 写入警告框")]),s._v(" "),a("li",[s._v("使用 document.write() 写入 HTML 输出")]),s._v(" "),a("li",[s._v("使用 innerHTML 写入 HTML 元素")]),s._v(" "),a("li",[s._v("使用 console.log() 写入浏览器控制台")])]),s._v(" "),a("h2",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),a("p",[s._v("在JavaScript中，我们不必显式地编写分号("),a("code",[s._v(";")]),s._v(")，但是JavaScript引擎仍然在语句之后自动添加分号。这称为"),a("strong",[s._v("自动分号插入")]),s._v("。例如，一个语句可以是变量，或者像"),a("code",[s._v("throw")]),s._v("、"),a("code",[s._v("return")]),s._v("、"),a("code",[s._v("break")]),s._v("这样的关键字。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("return \n  a + b\n  \n 实际转化\n   return;\n  a + b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" "),a("strong",[s._v("数据类型")])]),s._v(" "),a("p",[s._v("JavaScript 中的一切都是基本类型和对象。")]),s._v(" "),a("p",[s._v("数据分为基本数据类型和引用数据类型。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("基本数据类型")]),s._v("：String、Number、Boolean、Null、Undefined、Symbol、"),a("code",[s._v("bigint")]),s._v("。基本数据类型是直接存储在栈中的数据。")]),s._v(" "),a("li",[a("strong",[s._v("引用数据类型")]),s._v("：Array、Object。引用数据类型存储的是该对象在栈中引用，真实的数据存储在内存中。")])]),s._v(" "),a("p",[s._v("基本类型包括 "),a("code",[s._v("boolean")]),s._v(", "),a("code",[s._v("null")]),s._v(", "),a("code",[s._v("undefined")]),s._v(", "),a("code",[s._v("bigint")]),s._v(", "),a("code",[s._v("number")]),s._v(", "),a("code",[s._v("string")]),s._v(", "),a("code",[s._v("symbol")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("值类型(基本类型)")]),s._v("：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。")]),s._v(" "),a("p",[a("strong",[s._v("引用数据类型")]),s._v("：对象(Object)、数组(Array)、函数(Function)。")]),s._v(" "),a("ul",[a("li",[s._v("数值（number）：整数和小数（比如"),a("code",[s._v("1")]),s._v("和"),a("code",[s._v("3.14")]),s._v("）")]),s._v(" "),a("li",[s._v("字符串（string）：文本（比如"),a("code",[s._v("Hello World")]),s._v("）。")]),s._v(" "),a("li",[s._v("布尔值（boolean）：表示真伪的两个特殊值，即"),a("code",[s._v("true")]),s._v("（真）和"),a("code",[s._v("false")]),s._v("（假）")]),s._v(" "),a("li",[a("code",[s._v("undefined")]),s._v("：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值")]),s._v(" "),a("li",[a("code",[s._v("null")]),s._v("：表示空值，即此处的值为空。")]),s._v(" "),a("li",[s._v("对象（object）：各种值组成的集合。")])]),s._v(" "),a("p",[s._v("Object 是 JavaScript 中所有对象的父对象")]),s._v(" "),a("p",[s._v("数据封装类对象：Object、Array、Boolean、Number 和 String")]),s._v(" "),a("p",[s._v("其他对象：Function、Arguments、Math、Date、RegExp、Error")]),s._v(" "),a("p",[s._v("新类型：Symbol")]),s._v(" "),a("p",[s._v("Undefined 与 null 的值相等，但类型不相等：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typeof undefined              // undefined\ntypeof null                   // object\nnull === undefined            // false\nnull == undefined             // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("赋值：引用地址的拷贝。修改赋值后的数据，不管是基本数据类型还是引用数据类型，都会影响到原数据。")]),s._v(" "),a("p",[s._v("浅拷贝：一层拷贝。在浅拷贝中，修改基本数据类型不会影响原有数据的基本数据类型，修改引用数据类型会影响原有的数据类型。")]),s._v(" "),a("p",[s._v("深拷贝：无限层级拷贝。在深拷贝中，修改基本数据类型和引用数据类型都不会影响原有的数据类型。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th"),s._v(" "),a("th",[s._v("和原数据是否指向同一对象")]),s._v(" "),a("th",[s._v("原数据为基本数据类型")]),s._v(" "),a("th",[s._v("原数据包含子对象")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("赋值")]),s._v(" "),a("td",[s._v("是")]),s._v(" "),a("td",[s._v("改变【会】使原数据一同改变")]),s._v(" "),a("td",[s._v("改变【会】使原数据一同改变")])]),s._v(" "),a("tr",[a("td",[s._v("浅拷贝")]),s._v(" "),a("td",[s._v("否")]),s._v(" "),a("td",[s._v("改变【不会】使原数据一同改变")]),s._v(" "),a("td",[s._v("改变【会】使原数据一同改变")])]),s._v(" "),a("tr",[a("td",[s._v("深拷贝")]),s._v(" "),a("td",[s._v("否")]),s._v(" "),a("td",[s._v("改变【不会】使原数据一同改变")]),s._v(" "),a("td",[s._v("改变【不会】使原数据一同改变")])])])]),s._v(" "),a("h3",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[s._v("#")]),s._v(" 浅拷贝")]),s._v(" "),a("p",[s._v("对基本类型变量，浅拷贝是对值的拷贝，没有深拷贝的概念。对引用类型来说，浅拷贝是对对象地址的拷贝，并没有开辟新的栈，复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，另外一个对象的属性也会改变， 而深拷贝则是开辟新的栈。")]),s._v(" "),a("p",[s._v("Object.assign()"),a("code",[s._v("Object.assign()")]),s._v(" 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。需要注意的是，"),a("code",[s._v("Object.assgin()")]),s._v(" 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。")]),s._v(" "),a("p",[s._v("Array.prototype.concat()是数组的一个内置方法，用户合并两个或者多个数组。这个方法不会改变现有数组，而是返回一个新数组。")]),s._v(" "),a("p",[s._v("Array.prototype.slice()也是数组的一个内置方法，该方法会返回一个新的对象。不会改变原数组。")]),s._v(" "),a("p",[s._v("...obj 展开运算符")]),s._v(" "),a("h3",{attrs:{id:"深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[s._v("#")]),s._v(" 深拷贝")]),s._v(" "),a("p",[s._v("转JSON再解析回来原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一来一回之间，新的对象产生了，而且对象会开辟新的栈，实现深拷贝")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("JSON.parse(JSON.stringify(obj1))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",[s._v("值")]),s._v(" "),a("th",[s._v("转换规则")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("直接输出")])]),s._v(" "),a("tr",[a("td",[s._v("String")]),s._v(" "),a("td",[s._v("若字符串为空，则转换成 0 若字符串中包含有效的整数格式，则转换成十进制数 若字符串中包含有效的浮点格式，则转换成浮点数值 若字符串中包含有效的十六进制格式，则转换成十六进制数 其余情况，转换成 NaN")])]),s._v(" "),a("tr",[a("td",[s._v("Boolean")]),s._v(" "),a("td",[s._v("若为 true ，转换成 1 若为 false，转换成 0")])]),s._v(" "),a("tr",[a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("转换成 0")])]),s._v(" "),a("tr",[a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("转换成 NaN")])]),s._v(" "),a("tr",[a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("调用 Object 的 "),a("code",[s._v("valueOf()")]),s._v(" 方法，按照上述规则转换 若为 NaN，调用 Object 的"),a("code",[s._v("toString()")]),s._v(" 方法，按照上述规则转换")])])])]),s._v(" "),a("p",[s._v("转换规则如下：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("值")]),s._v(" "),a("th",[s._v("转换规则")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("转换成数字值")])]),s._v(" "),a("tr",[a("td",[s._v("String")]),s._v(" "),a("td",[s._v("直接输出")])]),s._v(" "),a("tr",[a("td",[s._v("Boolean")]),s._v(" "),a("td",[s._v("若为 true ，转换成 true 若为 false，转换成 false")])]),s._v(" "),a("tr",[a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("转换成 null")])]),s._v(" "),a("tr",[a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("转换成 undefined")])]),s._v(" "),a("tr",[a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("按特定的规则转换")])])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("值")]),s._v(" "),a("th",[s._v("转换规则")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("0、NaN 转换成 false 其余情况转换成 true")])]),s._v(" "),a("tr",[a("td",[s._v("String")]),s._v(" "),a("td",[s._v("空字符串转换成 false 其余情况转换成 true")])]),s._v(" "),a("tr",[a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("转换成 false")])]),s._v(" "),a("tr",[a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("转换成 false")])]),s._v(" "),a("tr",[a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("转换成 true")])])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("顺序")]),s._v(" "),a("th",[s._v("变量 1")]),s._v(" "),a("th",[s._v("变量 2")]),s._v(" "),a("th",[s._v("操作")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("1")]),s._v(" "),a("td",[s._v("NaN")]),s._v(" "),a("td",[s._v("*")]),s._v(" "),a("td",[s._v("返回 false")])]),s._v(" "),a("tr",[a("td",[s._v("2")]),s._v(" "),a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("返回 true")])]),s._v(" "),a("tr",[a("td",[s._v("3")]),s._v(" "),a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("返回 true")])]),s._v(" "),a("tr",[a("td",[s._v("4")]),s._v(" "),a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("返回 true")])]),s._v(" "),a("tr",[a("td",[s._v("5")]),s._v(" "),a("td",[s._v("Null")]),s._v(" "),a("td",[s._v("除 Null、Undefined 外")]),s._v(" "),a("td",[s._v("返回 false")])]),s._v(" "),a("tr",[a("td",[s._v("6")]),s._v(" "),a("td",[s._v("Undefined")]),s._v(" "),a("td",[s._v("除 Null、Undefined 外")]),s._v(" "),a("td",[s._v("返回 false")])]),s._v(" "),a("tr",[a("td",[s._v("7")]),s._v(" "),a("td",[s._v("Boolean")]),s._v(" "),a("td",[s._v("*")]),s._v(" "),a("td",[s._v("将 Boolean 转换成 Number 后比较")])]),s._v(" "),a("tr",[a("td",[s._v("8")]),s._v(" "),a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("当两个对象指向同一内存地址时，才会相等")])]),s._v(" "),a("tr",[a("td",[s._v("9")]),s._v(" "),a("td",[s._v("Object")]),s._v(" "),a("td",[s._v("Number、String")]),s._v(" "),a("td",[s._v("将 Object 转换成原始值 (Number/String) 后比较 首先使用 "),a("code",[s._v("valueOf()")]),s._v(" 方法 若对象能转换成原始值，则返回结果 否则使用 "),a("code",[s._v("toString()")]),s._v(" 方法 若对象能转换成原始值，则返回结果 否则抛出 "),a("code",[s._v("TypeError")]),s._v(" 异常")])]),s._v(" "),a("tr",[a("td",[s._v("10")]),s._v(" "),a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("直接比较")])]),s._v(" "),a("tr",[a("td",[s._v("11")]),s._v(" "),a("td",[s._v("String")]),s._v(" "),a("td",[s._v("String")]),s._v(" "),a("td",[s._v("直接比较")])]),s._v(" "),a("tr",[a("td",[s._v("12")]),s._v(" "),a("td",[s._v("String")]),s._v(" "),a("td",[s._v("Number")]),s._v(" "),a("td",[s._v("将 String 转换成 Number 后比较")])])])]),s._v(" "),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),a("h3",{attrs:{id:"算数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符"}},[s._v("#")]),s._v(" 算数运算符")]),s._v(" "),a("p",[s._v("算数运算符用于对数字执行算数运算：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("+")]),s._v(" "),a("td",[s._v("加法")])]),s._v(" "),a("tr",[a("td",[s._v("-")]),s._v(" "),a("td",[s._v("减法")])]),s._v(" "),a("tr",[a("td",[s._v("*")]),s._v(" "),a("td",[s._v("乘法")])]),s._v(" "),a("tr",[a("td",[s._v("**")]),s._v(" "),a("td",[s._v("幂（"),a("a",{attrs:{href:"https://www.w3school.com.cn/js/js_es6.asp",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2016"),a("OutboundLink")],1),s._v("）x ** y 产生的结果与 Math.pow(x,y) 相同:")])]),s._v(" "),a("tr",[a("td",[s._v("/")]),s._v(" "),a("td",[s._v("除法")])]),s._v(" "),a("tr",[a("td",[s._v("%")]),s._v(" "),a("td",[s._v("系数返回除法的余数")])]),s._v(" "),a("tr",[a("td",[s._v("++")]),s._v(" "),a("td",[s._v("递加")])]),s._v(" "),a("tr",[a("td",[s._v("--")]),s._v(" "),a("td",[s._v("递减")])])])]),s._v(" "),a("p",[s._v("乘法还有一些特殊行为")]),s._v(" "),a("ul",[a("li",[s._v("如果结果太大或太小，那么生成的结果是 Infinity 或 -Infinity。")]),s._v(" "),a("li",[s._v("如果某个运算数是 NaN，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 乘以 0，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 乘以 0 以外的任何数字，结果为 Infinity 或 -Infinity。")]),s._v(" "),a("li",[s._v("Infinity 乘以 Infinity，结果为 Infinity。")])]),s._v(" "),a("p",[s._v("除法运算符也有一些特殊行为：")]),s._v(" "),a("ul",[a("li",[s._v("如果结果太大或太小，那么生成的结果是 Infinity 或 -Infinity。")]),s._v(" "),a("li",[s._v("如果某个运算数是 NaN，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 被 Infinity 除，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 被任何数字除，结果为 Infinity。")]),s._v(" "),a("li",[s._v("0 除一个任何非无穷大的数字，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 被 0 以外的任何数字除，结果为 Infinity 或 -Infinity。")])]),s._v(" "),a("p",[s._v("取模运算符也有特殊的行为：")]),s._v(" "),a("ul",[a("li",[s._v("如果被除数是 Infinity，或除数是 0，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 被 Infinity 除，结果为 NaN。")]),s._v(" "),a("li",[s._v("如果除数是无穷大的数，结果为被除数。")]),s._v(" "),a("li",[s._v("如果被除数为 0，结果为 0。")])]),s._v(" "),a("p",[s._v("加法也有一些特殊行为：")]),s._v(" "),a("ul",[a("li",[s._v("某个运算数是 NaN，那么结果为 NaN。")]),s._v(" "),a("li",[s._v("-Infinity 加 -Infinity，结果为 -Infinity。")]),s._v(" "),a("li",[s._v("Infinity 加 -Infinity，结果为 NaN。")]),s._v(" "),a("li",[s._v("+0 加 +0，结果为 +0。")]),s._v(" "),a("li",[s._v("-0 加 +0，结果为 +0。")]),s._v(" "),a("li",[s._v("-0 加 -0，结果为 -0。")])]),s._v(" "),a("p",[s._v("减法运算符也有一些特殊行为：")]),s._v(" "),a("ul",[a("li",[s._v("某个运算数是 NaN，那么结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 减 Infinity，结果为 NaN。")]),s._v(" "),a("li",[s._v("-Infinity 减 -Infinity，结果为 NaN。")]),s._v(" "),a("li",[s._v("Infinity 减 -Infinity，结果为 Infinity。")]),s._v(" "),a("li",[s._v("-Infinity 减 Infinity，结果为 -Infinity。")]),s._v(" "),a("li",[s._v("+0 减 +0，结果为 +0。")]),s._v(" "),a("li",[s._v("-0 减 -0，结果为 -0。")]),s._v(" "),a("li",[s._v("+0 减 -0，结果为 +0。")]),s._v(" "),a("li",[s._v("某个运算符不是数字，那么结果为 NaN。")])]),s._v(" "),a("h3",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[s._v("#")]),s._v(" 赋值运算符")]),s._v(" "),a("p",[s._v("赋值运算符向 JavaScript 变量赋值。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("例子")]),s._v(" "),a("th",[s._v("等同于")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("=")]),s._v(" "),a("td",[s._v("x = y")]),s._v(" "),a("td",[s._v("x = y")])]),s._v(" "),a("tr",[a("td",[s._v("+=")]),s._v(" "),a("td",[s._v("x += y")]),s._v(" "),a("td",[s._v("x = x + y")])]),s._v(" "),a("tr",[a("td",[s._v("-=")]),s._v(" "),a("td",[s._v("x -= y")]),s._v(" "),a("td",[s._v("x = x - y")])]),s._v(" "),a("tr",[a("td",[s._v("*=")]),s._v(" "),a("td",[s._v("x *= y")]),s._v(" "),a("td",[s._v("x = x * y")])]),s._v(" "),a("tr",[a("td",[s._v("/=")]),s._v(" "),a("td",[s._v("x /= y")]),s._v(" "),a("td",[s._v("x = x / y")])]),s._v(" "),a("tr",[a("td",[s._v("%=")]),s._v(" "),a("td",[s._v("x %= y")]),s._v(" "),a("td",[s._v("x = x % y")])]),s._v(" "),a("tr",[a("td",[s._v("<<=")]),s._v(" "),a("td",[s._v("x <<= y")]),s._v(" "),a("td",[s._v("x = x << y")])]),s._v(" "),a("tr",[a("td",[s._v(">>=")]),s._v(" "),a("td",[s._v("x >>= y")]),s._v(" "),a("td",[s._v("x = x >> y")])]),s._v(" "),a("tr",[a("td",[s._v(">>>=")]),s._v(" "),a("td",[s._v("x >>>= y")]),s._v(" "),a("td",[s._v("x = x >>> y")])]),s._v(" "),a("tr",[a("td",[s._v("&=")]),s._v(" "),a("td",[s._v("x &= y")]),s._v(" "),a("td",[s._v("x = x & y")])]),s._v(" "),a("tr",[a("td",[s._v("^=")]),s._v(" "),a("td",[s._v("x ^= y")]),s._v(" "),a("td",[s._v("x = x ^ y")])]),s._v(" "),a("tr",[a("td",[s._v("|=")]),s._v(" "),a("td",[s._v("x |= y")]),s._v(" "),a("td",[s._v("x = x | y")])]),s._v(" "),a("tr",[a("td",[s._v("**=")]),s._v(" "),a("td",[s._v("x **= y")]),s._v(" "),a("td",[s._v("x = x ** y")])])])]),s._v(" "),a("p",[s._v("加法赋值运算符（+=）向变量添加一个值。")]),s._v(" "),a("h3",{attrs:{id:"字符串运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串运算符"}},[s._v("#")]),s._v(" 字符串运算符")]),s._v(" "),a("ul",[a("li",[s._v("+在用于字符串时，+ 运算符被称为级联运算符。")]),s._v(" "),a("li",[s._v("+=")])]),s._v(" "),a("h3",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[s._v("#")]),s._v(" 比较运算符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("==")]),s._v(" "),a("td",[s._v("等于")])]),s._v(" "),a("tr",[a("td",[s._v("===")]),s._v(" "),a("td",[s._v("等值等型")])]),s._v(" "),a("tr",[a("td",[s._v("!=")]),s._v(" "),a("td",[s._v("不相等")])]),s._v(" "),a("tr",[a("td",[s._v("!==")]),s._v(" "),a("td",[s._v("不等值或不等型")])]),s._v(" "),a("tr",[a("td",[s._v(">")]),s._v(" "),a("td",[s._v("大于")])]),s._v(" "),a("tr",[a("td",[s._v("<")]),s._v(" "),a("td",[s._v("小于")])]),s._v(" "),a("tr",[a("td",[s._v(">=")]),s._v(" "),a("td",[s._v("大于或等于")])]),s._v(" "),a("tr",[a("td",[s._v("<=")]),s._v(" "),a("td",[s._v("小于或等于")])]),s._v(" "),a("tr",[a("td",[s._v("?")]),s._v(" "),a("td",[s._v("三元运算符")])])])]),s._v(" "),a("h4",{attrs:{id:"比较数字和字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较数字和字符串"}},[s._v("#")]),s._v(" 比较数字和字符串")]),s._v(" "),a("p",[s._v('两个运算数都是字符串，所以比较的是它们的字符代码（"2" 的字符代码是 50，"3" 的字符代码是 51）。')]),s._v(" "),a("p",[s._v("无论何时比较一个数字和一个字符串，ECMAScript 都会把字符串转换成数字，然后按照数字顺序比较它们。")]),s._v(" "),a("h4",{attrs:{id:"等号和非等号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等号和非等号"}},[s._v("#")]),s._v(" 等号和非等号")]),s._v(" "),a("p",[s._v("为确定两个运算数是否相等，这两个运算符都会进行类型转换。")]),s._v(" "),a("p",[s._v("执行类型转换的规则如下：")]),s._v(" "),a("ul",[a("li",[s._v("如果一个运算数是 Boolean 值，在检查相等性之前，把它转换成数字值。false 转换成 0，true 为 1。")]),s._v(" "),a("li",[s._v("如果一个运算数是字符串，另一个是数字，在检查相等性之前，要尝试把字符串转换成数字。")]),s._v(" "),a("li",[s._v("如果一个运算数是对象，另一个是字符串，在检查相等性之前，要尝试把对象转换成字符串。")]),s._v(" "),a("li",[s._v("如果一个运算数是对象，另一个是数字，在检查相等性之前，要尝试把对象转换成数字。")])]),s._v(" "),a("p",[s._v("在比较时，该运算符还遵守下列规则：")]),s._v(" "),a("ul",[a("li",[s._v("值 null 和 undefined 相等。")]),s._v(" "),a("li",[s._v("在检查相等性时，不能把 null 和 undefined 转换成其他值。")]),s._v(" "),a("li",[s._v("如果某个运算数是 NaN，等号将返回 false，非等号将返回 true。")]),s._v(" "),a("li",[s._v("如果两个运算数都是对象，那么比较的是它们的引用值。如果两个运算数指向同一对象，那么等号返回 true，否则两个运算数不等。")])]),s._v(" "),a("h4",{attrs:{id:"全等号和非全等号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全等号和非全等号"}},[s._v("#")]),s._v(" 全等号和非全等号")]),s._v(" "),a("p",[s._v("在检查相等性前，不执行类型转换。")]),s._v(" "),a("h3",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[s._v("#")]),s._v(" 逻辑运算符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("&&")]),s._v(" "),a("td",[s._v("逻辑与")])]),s._v(" "),a("tr",[a("td",[s._v("||")]),s._v(" "),a("td",[s._v("逻辑或")])]),s._v(" "),a("tr",[a("td",[s._v("!")]),s._v(" "),a("td",[s._v("逻辑非")])])])]),s._v(" "),a("p",[a("strong",[s._v("逻辑 NOT 运算符返回的一定是 Boolean 值")]),s._v("。")]),s._v(" "),a("p",[s._v("逻辑 NOT 运算符的行为如下：")]),s._v(" "),a("ul",[a("li",[s._v("如果运算数是对象，返回 false")]),s._v(" "),a("li",[s._v("如果运算数是数字 0，返回 true")]),s._v(" "),a("li",[s._v("如果运算数是 0 以外的任何数字，返回 false")]),s._v(" "),a("li",[s._v("如果运算数是 null，返回 true")]),s._v(" "),a("li",[s._v("如果运算数是 NaN，返回 true")]),s._v(" "),a("li",[s._v("如果运算数是 undefined，发生错误")])]),s._v(" "),a("p",[a("strong",[s._v("逻辑 AND 运算的运算数可以是任何类型的，不止是 Boolean 值。")])]),s._v(" "),a("p",[s._v("如果某个运算数不是原始的 Boolean 型值，逻辑 AND 运算并不一定返回 Boolean 值：")]),s._v(" "),a("ul",[a("li",[s._v("如果一个运算数是对象，另一个是 Boolean 值，返回该对象。")]),s._v(" "),a("li",[s._v("如果两个运算数都是对象，返回第二个对象。")]),s._v(" "),a("li",[s._v("如果某个运算数是 null，返回 null。")]),s._v(" "),a("li",[s._v("如果某个运算数是 NaN，返回 NaN。")]),s._v(" "),a("li",[s._v("如果某个运算数是 undefined，发生错误。")])]),s._v(" "),a("p",[s._v("逻辑 OR 运算并不一定返回 Boolean 值：")]),s._v(" "),a("ul",[a("li",[s._v("如果一个运算数是对象，并且该对象左边的运算数值均为 false，则返回该对象。")]),s._v(" "),a("li",[s._v("如果两个运算数都是对象，返回第一个对象。")]),s._v(" "),a("li",[s._v("如果最后一个运算数是 null，并且其他运算数值均为 false，则返回 null。")]),s._v(" "),a("li",[s._v("如果最后一个运算数是 NaN，并且其他运算数值均为 false，则返回 NaN。")]),s._v(" "),a("li",[s._v("如果某个运算数是 undefined，发生错误。")])]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("||")]),s._v("运算符，我们可以返回第一个真值。 如果所有值都是假值，则返回最后一个值。")]),s._v(" "),a("h3",{attrs:{id:"类型运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型运算符"}},[s._v("#")]),s._v(" 类型运算符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("typeof")]),s._v(" "),a("td",[s._v("返回变量的类型。")])]),s._v(" "),a("tr",[a("td",[s._v("instanceof")]),s._v(" "),a("td",[s._v("返回 true，如果对象是对象类型的实例。")])])])]),s._v(" "),a("h3",{attrs:{id:"位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[s._v("#")]),s._v(" 位运算符")]),s._v(" "),a("p",[s._v("位运算符处理 32 位数。")]),s._v(" "),a("p",[s._v("该运算中的任何数值运算数都会被转换为 32 位的数。结果会被转换回 JavaScript 数。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")]),s._v(" "),a("th",[s._v("例子")]),s._v(" "),a("th",[s._v("等同于")]),s._v(" "),a("th",[s._v("结果")]),s._v(" "),a("th",[s._v("十进制")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("&")]),s._v(" "),a("td",[s._v("与")]),s._v(" "),a("td",[s._v("5 & 1")]),s._v(" "),a("td",[s._v("0101 & 0001")]),s._v(" "),a("td",[s._v("0001")]),s._v(" "),a("td",[s._v("1")])]),s._v(" "),a("tr",[a("td",[s._v("|")]),s._v(" "),a("td",[s._v("或")]),s._v(" "),a("td",[s._v("5 | 1")]),s._v(" "),a("td",[s._v("0101 | 0001")]),s._v(" "),a("td",[s._v("0101")]),s._v(" "),a("td",[s._v("5")])]),s._v(" "),a("tr",[a("td",[s._v("~")]),s._v(" "),a("td",[s._v("非")]),s._v(" "),a("td",[s._v("~ 5")]),s._v(" "),a("td",[s._v("~0101")]),s._v(" "),a("td",[s._v("1010")]),s._v(" "),a("td",[s._v("10")])]),s._v(" "),a("tr",[a("td",[s._v("^")]),s._v(" "),a("td",[s._v("异或")]),s._v(" "),a("td",[s._v("5 ^ 1")]),s._v(" "),a("td",[s._v("0101 ^ 0001")]),s._v(" "),a("td",[s._v("0100")]),s._v(" "),a("td",[s._v("4")])]),s._v(" "),a("tr",[a("td",[s._v("<<")]),s._v(" "),a("td",[s._v("零填充左位移")]),s._v(" "),a("td",[s._v("5 << 1")]),s._v(" "),a("td",[s._v("0101 << 1")]),s._v(" "),a("td",[s._v("1010")]),s._v(" "),a("td",[s._v("10")])]),s._v(" "),a("tr",[a("td",[s._v(">>")]),s._v(" "),a("td",[s._v("有符号右位移")]),s._v(" "),a("td",[s._v("5 >> 1")]),s._v(" "),a("td",[s._v("0101 >> 1")]),s._v(" "),a("td",[s._v("0010")]),s._v(" "),a("td",[s._v("2")])]),s._v(" "),a("tr",[a("td",[s._v(">>>")]),s._v(" "),a("td",[s._v("零填充右位移")]),s._v(" "),a("td",[s._v("5 >>> 1")]),s._v(" "),a("td",[s._v("0101 >>> 1")]),s._v(" "),a("td",[s._v("0010")]),s._v(" "),a("td",[s._v("2")])])])]),s._v(" "),a("h3",{attrs:{id:"一元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元运算符"}},[s._v("#")]),s._v(" "),a("strong",[s._v("一元运算符")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("delete")]),s._v(" "),a("td",[s._v("返回布尔值，删除对以前定义的对象属性或方法的引用")])]),s._v(" "),a("tr",[a("td",[s._v("void")]),s._v(" "),a("td",[s._v("对任何值返回 undefined")])]),s._v(" "),a("tr",[a("td",[s._v("前增量运算符++")]),s._v(" "),a("td",[s._v("就是数值上加 1")])]),s._v(" "),a("tr",[a("td",[s._v("前减量运算符--")]),s._v(" "),a("td",[s._v("是从数值上减 1")])]),s._v(" "),a("tr",[a("td",[s._v("后增量运算符++")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("后减量运算符--")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[s._v("一元加法")]),s._v(" "),a("td",[s._v("一元加法对数字无作用，但对字符串却有有趣的效果，会把字符串转换成数字")])]),s._v(" "),a("tr",[a("td",[s._v("一元减法")]),s._v(" "),a("td",[s._v("一元减法运算符也会把字符串转换成近似的数字，此外还会对该值求负")])])])]),s._v(" "),a("h4",{attrs:{id:"delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[s._v("#")]),s._v(" delete")]),s._v(" "),a("p",[s._v("操作符返回一个布尔值： "),a("code",[s._v("true")]),s._v("指删除成功，否则返回"),a("code",[s._v("false")]),s._v(". 但是通过 "),a("code",[s._v("var")]),s._v(", "),a("code",[s._v("const")]),s._v(" 或 "),a("code",[s._v("let")]),s._v(" 关键字声明的变量无法用 "),a("code",[s._v("delete")]),s._v(" 操作符来删除。")]),s._v(" "),a("h3",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[s._v("#")]),s._v(" ...扩展运算符")]),s._v(" "),a("p",[s._v("JavaScript 有三种方法，可以确定一个值到底是什么类型。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("typeof")]),s._v("运算符")]),s._v(" "),a("li",[a("code",[s._v("instanceof")]),s._v("运算符")]),s._v(" "),a("li",[a("code",[s._v("Object.prototype.toString")]),s._v("方法")])]),s._v(" "),a("h3",{attrs:{id:"typeof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof运算符"}},[s._v("#")]),s._v(" "),a("code",[s._v("typeof")]),s._v("运算符")]),s._v(" "),a("p",[s._v("可以返回一个值的数据类型。")]),s._v(" "),a("ul",[a("li",[s._v("string")]),s._v(" "),a("li",[s._v("number")]),s._v(" "),a("li",[s._v("boolean")]),s._v(" "),a("li",[s._v("undefined")]),s._v(" "),a("li",[a("code",[s._v("function")])]),s._v(" "),a("li",[a("code",[s._v("object")])])]),s._v(" "),a("p",[s._v("数值、字符串、布尔值分别返回"),a("code",[s._v("number")]),s._v("、"),a("code",[s._v("string")]),s._v("、"),a("code",[s._v("boolean")]),s._v("。函数返回"),a("code",[s._v("function")]),s._v("。"),a("code",[s._v("undefined")]),s._v("返回"),a("code",[s._v("undefined")]),s._v("。对象返回"),a("code",[s._v("object")]),s._v("。"),a("code",[s._v("null")]),s._v("返回"),a("code",[s._v("object")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('typeof 123 // "number"\ntypeof \'123\' // "string"\ntypeof false // "boolean"\nfunction f() {}\ntypeof f\n// "function"\ntypeof undefined\n// "undefined"\n//typeof可以用来检查一个没有声明的变量，而不报错。\ntypeof v\n// "undefined"\n// 错误的写法\nif (v) {\n  // ...\n}\n// ReferenceError: v is not defined\n// 正确的写法\nif (typeof v === "undefined") {\n  // ...\n}\ntypeof window // "object"\ntypeof {} // "object"\ntypeof [] // "object"\ntypeof null // "object"\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h3",{attrs:{id:"instanceof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof运算符"}},[s._v("#")]),s._v(" "),a("code",[s._v("instanceof")]),s._v("运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var o = {};\nvar a = [];\no instanceof Array // false\na instanceof Array // true\no instanceof Object // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"in-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-运算符"}},[s._v("#")]),s._v(" in 运算符")]),s._v(" "),a("p",[s._v("检查某个键名是否存在的运算符"),a("code",[s._v("in")]),s._v("，适用于对象，也适用于数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [ 'a', 'b', 'c' ];\n2 in arr  // true\n'2' in arr // true\n4 in arr // false\n//数组存在键名为2的键。由于键名都是字符串，所以数值2会自动转成字符串。\narr[100] = 'a';\n100 in arr // true\n1 in arr // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("注意，如果数组的某个位置是空位，"),a("code",[s._v("in")]),s._v("运算符返回"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[s._v("#")]),s._v(" 布尔值")]),s._v(" "),a("p",[s._v("**"),a("code",[s._v("Boolean")]),s._v("**对象是一个布尔值的对象包装器。")]),s._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("p",[s._v("JavaScript 变量是存储数据值的容器。")]),s._v(" "),a("p",[a("code",[s._v("var")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("var")]),s._v(" 可以重复声明")]),s._v(" "),a("li",[s._v("作用域：全局作用域 和 函数作用域")]),s._v(" "),a("li",[s._v("会进行预解析")])]),s._v(" "),a("p",[a("code",[s._v("let")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("统一作用域下不能重复声明")]),s._v(" "),a("li",[s._v("作用域：全局作用域 和 块级作用域 "),a("code",[s._v("{}")])]),s._v(" "),a("li",[s._v("不进行预解析")])]),s._v(" "),a("p",[a("code",[s._v("const")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("let")]),s._v(" 有的它也有")]),s._v(" "),a("li",[s._v("初始化必须赋值")]),s._v(" "),a("li",[s._v("赋值后不能改动类型")])]),s._v(" "),a("p",[a("code",[s._v("const")]),s._v(" 关键字意味着我们不能 "),a("em",[s._v("重定义")]),s._v(" 变量中的值，它 "),a("em",[s._v("仅可读")]),s._v("。而然，值本身不可修改。数组 "),a("code",[s._v("emojis")]),s._v(" 中的值可被修改，如 push 新的值, 拼接，又或者将数组的长度设置为0。")]),s._v(" "),a("p",[a("code",[s._v("let")]),s._v(" 和 "),a("code",[s._v("var")]),s._v(" 比较：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("var")]),s._v(" 声明的变量只能是全局或者整个函数块的")]),s._v(" "),a("li",[a("code",[s._v("let")]),s._v(" 允许声明一个在作用域限制在块级的变量、语句或者表达式（块级作用域）")]),s._v(" "),a("li",[a("code",[s._v("let")]),s._v(" 不能重复声明")]),s._v(" "),a("li",[a("code",[s._v("let")]),s._v(" 存在临时死区（temporal dead zone）")]),s._v(" "),a("li",[a("code",[s._v("let")]),s._v(" 不会被预解析（hoisting）")])]),s._v(" "),a("h3",{attrs:{id:"暂时性死区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区"}},[s._v("#")]),s._v(" 暂时性死区")]),s._v(" "),a("p",[s._v("只要块级作用域内存在 "),a("code",[s._v("let")]),s._v("/"),a("code",[s._v("const")]),s._v(" 命令，它所声明的变量就绑定这个区域，不再受外部的影响。")]),s._v(" "),a("p",[s._v("在代码块内，使用 "),a("code",[s._v("let")]),s._v("/"),a("code",[s._v("const")]),s._v(" 声明变量之前，该变量都是不可用的，所以叫 “暂时性死区”。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("test")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Uncaught ReferenceError: Cannot access 'a' before initialization")]),s._v("\n其原因是在同一个 block 中，"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" 在后面重新定义的，那么就不能在之前引用该变量。同时，也不能取嵌套外层的值。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"函数作用域和块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和块级作用域"}},[s._v("#")]),s._v(" 函数作用域和块级作用域")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("函数作用域")]),s._v("：在 JavaScript 中定义一个函数，函数内部的变量只能通过函数内部访问，同时它可以修改和影响外部变量。")]),s._v(" "),a("li",[a("strong",[s._v("块级作用域")]),s._v("：变量在离开定义的块级代码后立即被回收，存在暂时性死区的特性。")])]),s._v(" "),a("p",[s._v("在 ES5 中只有全局作用域和函数作用域，没有块级作用域，这会带来些许麻烦：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("内层变量覆盖外层变量")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("循环的变量泄露为全局变量")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("var")]),s._v(" 声明的变量或者非严格模式下（non-strict mode）创建的函数声明没有块级作用域。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("为了解决这个问题，ES6 新增了块级作用域：")]),s._v(" "),a("ul",[a("li",[s._v("块语句用于组合零个或者多个语句，这个块由一对大括号 "),a("code",[s._v("{}")]),s._v(" 界定。")])]),s._v(" "),a("p",[s._v("ES5 形成块级作用域的方法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("ES6 通过 {} 界定")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 或者 const x = 1;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"变量提升和函数提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量提升和函数提升"}},[s._v("#")]),s._v(" 变量提升和函数提升")]),s._v(" "),a("p",[s._v("函数提升就是为了解决相互递归的问题，大体上可以解决自下而上的顺序问题。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 验证偶数\nfunction isEven(n) {\n  if (n === 0) {\n    return true;\n  }\n  return isOdd(n - 1);\n}\nconsole.log(isEven(2)); // true\n// 验证奇数\nfunction isOdd(n) {\n  if (n === 0) {\n    return false;\n  }\n  return isEven(n - 1);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("如果没有函数提升，而是按照自下而上的顺序，当 "),a("code",[s._v("isEven")]),s._v(" 函数被调用时，"),a("code",[s._v("isOdd")]),s._v(" 函数还未声明，所以在 "),a("code",[s._v("isEven")]),s._v(" 内部无法调用 "),a("code",[s._v("isOdd")]),s._v(" 函数。")]),s._v(" "),a("p",[s._v("变量提升")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n输出："),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 打印的时候，因为 a 声明了但是没有填写值，所以是 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("换成 "),a("code",[s._v("let")]),s._v(" 或者 "),a("code",[s._v("const")]),s._v(" 语句呢？就会出现 "),a("strong",[s._v("暂时性死区")]),s._v("。")]),s._v(" "),a("p",[s._v("函数提升："),a("strong",[s._v("函数是一等公民")])]),s._v(" "),a("p",[s._v("题目一：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var foo = 3;\nfunction getFoo() {\n  var foo = foo || 5;\n  console.log(foo); // 输出 5\n}\ngetFoo();\n等价于\nfunction getFoo() {\n  var foo;\n  foo = foo || 5;\n  console.log(foo);\n}\nvar foo;\nfoo = 3;\ngetFoo();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("题目二：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function getFoo() {\n  foo();\n  var foo = function() {\n    console.log(1);\n  }\n  foo();\n  function foo() {\n    console.log(2);\n  }\n  foo();\n}\ngetFoo();\n等价于\nfunction getFoo() {\n  var foo;\n  function foo() {\n    console.log(2);\n  }\n  foo(); // 2\n  foo = function() {\n    console.log(1);\n  }\n  foo(); // 1\n  foo(); // 1\n}\ngetFoo();\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("题目三：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n等价于\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出")]),s._v("\nƒ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nUncaught TypeError"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" a is not a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v("题目四：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = 1;\nfunction b() {\n  a = 10;\n  return;\n  function a() {}\n}\nb();\nconsole.log(a);\n输出1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("题目五：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo() {\n  function bar() {\n    return 3;\n  }\n  return bar();\n  function bar() {\n    return 8;\n  }\n}\nconsole.log(foo());\n//输出\n8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("题目六：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var foo = { n: 1 };\n(function(foo) {\n  console.log(foo.n);\n  foo.n = 3;\n  foo = { n: 2 };\n  console.log(foo.n);\n})(foo)\nconsole.log(foo.n);\nvar foo = { n: 1 };\n(function(foo){            // 形参 foo 同实参 foo 一样指向同一片内存空间，这个空间里的 n 的值为 1\n    var foo;               // 优先级低于形参，无效。\n    console.log(foo.n);    // 输出 1\n    foo.n = 3;             // 形参与实参 foo 指向的内存空间里的 n 的值被改为 3\n    foo = { n: 2 };        // 形参 foo 指向了新的内存空间，里面 n 的值为 2.\n    console.log(foo.n);    // 输出新的内存空间的 n 的值\n})(foo);\nconsole.log(foo.n);        // 实参 foo 的指向还是原来的内存空间，里面的 n 的值为 3.\n输出：1 2 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"判断变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断变量"}},[s._v("#")]),s._v(" 判断变量")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("typeof(variable)")])]),s._v(" "),a("li",[a("code",[s._v("variable instanceof Array")])]),s._v(" "),a("li",[a("code",[s._v("variable.constructor = Array")])]),s._v(" "),a("li",[a("code",[s._v("Object.prototype.toString.call(variable)")])])]),s._v(" "),a("p",[a("code",[s._v("typeof")]),s._v(" 能区分的有：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("number")])]),s._v(" "),a("li",[a("code",[s._v("string")])]),s._v(" "),a("li",[a("code",[s._v("boolean")])]),s._v(" "),a("li",[a("code",[s._v("undefined")])]),s._v(" "),a("li",[a("code",[s._v("function")])]),s._v(" "),a("li",[a("code",[s._v("object")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bigint")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// symbol")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("instanceof")]),s._v(" "),a("p",[a("code",[s._v("instanceof")]),s._v(" 判断原型链指向")]),s._v(" "),a("p",[a("code",[s._v("instanceof")]),s._v(" 能判断的有：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Array")])]),s._v(" "),a("li",[a("code",[s._v("Function")])]),s._v(" "),a("li",[a("code",[s._v("Date")])]),s._v(" "),a("li",[a("code",[s._v("RegExp")])]),s._v(" "),a("li",[a("code",[s._v("Error")])]),s._v(" "),a("li",[a("code",[s._v("Object")])])]),s._v(" "),a("p",[s._v("constructor")]),s._v(" "),a("p",[s._v("除了 "),a("code",[s._v("undefined")]),s._v(" 和 "),a("code",[s._v("null")]),s._v("，其他类型基本可以通过 "),a("code",[s._v("constructor")]),s._v(" 判断。")]),s._v(" "),a("ul",[a("li",[s._v("Tom.constructor === Person")]),s._v(" "),a("li",[s._v("num.constructor === Number")]),s._v(" "),a("li",[s._v("str.constructor === String")]),s._v(" "),a("li",[s._v("bool.constructor === Boolean")]),s._v(" "),a("li",[s._v("arr.constructor === Array")]),s._v(" "),a("li",[s._v("json.constructor === Object")]),s._v(" "),a("li",[s._v("func.constructor === Function")]),s._v(" "),a("li",[s._v("date.constructor === Date")]),s._v(" "),a("li",[s._v("reg.constructor === RegExp")]),s._v(" "),a("li",[s._v("error.constructor === Error")])]),s._v(" "),a("p",[s._v("Array.prototype.toString.call")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [object Number]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[s._v("#")]),s._v(" 闭包")]),s._v(" "),a("p",[s._v("当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。")]),s._v(" "),a("p",[a("strong",[s._v("在函数 A 中还有函数 B，函数 B 调用了函数 A 中的变量，那么函数 B 就称为函数 A 的闭包。")])]),s._v(" "),a("p",[s._v("好处：")]),s._v(" "),a("ol",[a("li",[s._v("缓存。将变量隐藏起来不被 GC 回收。")]),s._v(" "),a("li",[s._v("实现柯里化。利用闭包特性完成柯里化。")])]),s._v(" "),a("p",[s._v("坏处：")]),s._v(" "),a("ol",[a("li",[s._v("内存消耗。闭包产生的变量无法被销毁。")]),s._v(" "),a("li",[s._v("性能问题。由于闭包内部变量优先级高于外部变量，所以需要多查找作用域链的一个层次，一定程度影响查找速度。")])]),s._v(" "),a("h2",{attrs:{id:"柯里化-currying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化-currying"}},[s._v("#")]),s._v(" 柯里化（Currying）")]),s._v(" "),a("p",[s._v("柯里化（Currying）是把接受多个参数的函数转变为单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。")]),s._v(" "),a("p",[s._v("柯里化是把一个多参数函数转换成一个嵌套的一元函数的过程；当函数有多个参数时先传递一部分参数调用（这部分参数永远不变），然后返回新的函数接收剩余的参数。")]),s._v(" "),a("p",[a("strong",[s._v("简单来说")]),s._v("：")]),s._v(" "),a("ol",[a("li",[s._v("通过闭包管理")]),s._v(" "),a("li",[s._v("支持链式调用")]),s._v(" "),a("li",[s._v("每次运行返回一个 "),a("code",[s._v("function")])])]),s._v(" "),a("p",[s._v("即：通过将多个参数换成一个参数，每次运行返回新函数的技术")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//普通的 add 函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//柯里化函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curryingAdd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curryingAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("好处：")]),s._v(" "),a("ol",[a("li",[s._v("参数复用")]),s._v(" "),a("li",[s._v("提前确认")]),s._v(" "),a("li",[s._v("延迟运行")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正则表达式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 校验数字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" numberReg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[0-9]+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 校验小写字母")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" stringReg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[a-z]+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// currying 后")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curryingCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("reg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("txt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("txt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 校验数字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" checkNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curryingCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numberReg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" checkString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curryingCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stringReg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'13888888888'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'jsliang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        money "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 未真正求值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 未真正求值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 未真正求值")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 求值并输出：600")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),a("h3",{attrs:{id:"创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a = [];\nlet b = new Array();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("初始化值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a = [1, 2, 3]; // [1, 2, 3]\nlet b = new Array(3); // [undefined, undefined, undefined]\nlet c = new Array([1, 2, 3]); // [1, 2, 3]\nlet d = new Array(3).fill(1); // [1, 1, 1]\nlet e = new Array(3).fill([]); // [[], [], []]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[s._v("#")]),s._v(" 静态方法")]),s._v(" "),a("p",[a("code",[s._v("Array.isArray")]),s._v("方法返回一个布尔值，表示参数是否为数组。它可以弥补"),a("code",[s._v("typeof")]),s._v("运算符的不足。")]),s._v(" "),a("h3",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("valueOf()方法返回数组本身。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = [1, 2, 3];\narr.valueOf() // [1, 2, 3]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("toString()方法返回数组的字符串形式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var arr = [1, 2, 3, [4, 5, 6]];\narr.toString() // "1,2,3,4,5,6"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("push()方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。")])]),s._v(" "),a("li",[a("p",[s._v("pop()方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("shift()")]),s._v("方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("unshift()")]),s._v("方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = ['a', 'b', 'c'];\na.unshift('x'); // 4\na // ['x', 'a', 'b', 'c']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("join()")]),s._v("方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("concat")]),s._v("方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("reverse")]),s._v("方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var a = [\'a\', \'b\', \'c\'];\na.reverse() // ["c", "b", "a"]\na // ["c", "b", "a"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("slice()")]),s._v("方法用于提取目标数组的一部分，返回一个新数组，原数组不变。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("arr.slice(start, end);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("splice()")]),s._v("方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("arr.splice(start, count, addElement1, addElement2, ...);\nsplice的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。\n起始位置如果是负数，就表示从倒数位置开始删除。\n插入元素，splice方法的第二个参数可以设为0。\n如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("sort")]),s._v("方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("['d', 'c', 'b', 'a'].sort()\n// ['a', 'b', 'c', 'd']\n//sort()方法不是按照大小排序，而是按照字典顺序。\n自定义方式排序\n[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]\n排序顺序可以是字母或数字，也可以是升序或降序。\n\n以升序对数组中的数字进行排序\n\n​```\nvar points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a-b}); // [1,5,10,25,40,100].\n​```\n以降序对数组中的数字进行排序\npoints.sort(function(a, b){return b-a});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("map")]),s._v("方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。")]),s._v(" "),a("p",[a("code",[s._v("map")]),s._v("方法接受一个函数作为参数。该函数调用时，"),a("code",[s._v("map")]),s._v("方法向它传入三个参数：当前成员、当前位置和数组本身。")]),s._v(" "),a("p",[a("code",[s._v("map")]),s._v("方法还可以接受第二个参数，用来绑定回调函数内部的"),a("code",[s._v("this")]),s._v("变量")]),s._v(" "),a("p",[s._v("Map()返回一个数组，该数组的长度与调用该数组的长度相同。只要它的回调函数没有改变，它也不会改变原始数组。它也可以采用三个类型参数（元素，值和索引）。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("forEach")]),s._v("方法与"),a("code",[s._v("map")]),s._v("方法很相似，也是对数组的所有成员依次执行参数函数。但是，"),a("code",[s._v("forEach")]),s._v("方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用"),a("code",[s._v("map")]),s._v("方法，否则使用"),a("code",[s._v("forEach")]),s._v("方法。forEach()接受另一个函数作为参数。它用于以一种简单的方式循环遍历数组项。它可以接受三个类型的参数（元素，值和索引）。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("filter")]),s._v("方法用于过滤数组成员，满足条件的成员组成一个新数组返回。"),a("code",[s._v("filter")]),s._v("方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。"),a("code",[s._v("filter")]),s._v("方法还可以接受第二个参数，用来绑定参数函数内部的"),a("code",[s._v("this")]),s._v("变量。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("some")]),s._v("方法是只要一个成员的返回值是"),a("code",[s._v("true")]),s._v("，则整个"),a("code",[s._v("some")]),s._v("方法的返回值就是"),a("code",[s._v("true")]),s._v("，否则返回"),a("code",[s._v("false")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("every")]),s._v("方法是所有成员的返回值都是"),a("code",[s._v("true")]),s._v("，整个"),a("code",[s._v("every")]),s._v("方法才返回"),a("code",[s._v("true")]),s._v("，否则返回"),a("code",[s._v("false")]),s._v("。注意，对于空数组，"),a("code",[s._v("some")]),s._v("方法返回"),a("code",[s._v("false")]),s._v("，"),a("code",[s._v("every")]),s._v("方法返回"),a("code",[s._v("true")]),s._v("，回调函数都不会执行。"),a("code",[s._v("some")]),s._v("和"),a("code",[s._v("every")]),s._v("方法还可以接受第二个参数，用来绑定参数函数内部的"),a("code",[s._v("this")]),s._v("变量。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("reduce")]),s._v("方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，"),a("code",[s._v("reduce")]),s._v("是从左到右处理（从第一个成员到最后一个成员）。该函数reduce有两个位置参数，第一个是累加器，另一个是迭代值，它返回累加值。")]),s._v(" "),a("p",[s._v("函数4个参数:")]),s._v(" "),a("ol",[a("li",[s._v("Accumulator (acc) (累计器)")]),s._v(" "),a("li",[s._v("Current Value (cur) (当前值)")]),s._v(" "),a("li",[s._v("Current Index (idx) (当前索引)")]),s._v(" "),a("li",[s._v("Source Array (src) (源数组)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const users = [  { name: 'John', age: 34 },  { name: 'Amy', age: 20 },  { name: 'camperCat', age: 10 }];\nconst sumOfAges = users.reduce((sum, user) => sum + user.age, 0);console.log(sumOfAges); //Returns: 64.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("还有一个可选参数"),a("code",[s._v("initialValue")]),s._v(", 该参数将作为第一次调用回调函数时的第一个参数的值。如果没有提供"),a("code",[s._v("initialValue")]),s._v("，则将使用数组中的第一个元素。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("reduceRight")]),s._v("方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，"),a("code",[s._v("reduceRight")]),s._v("则是从右到左（从最后一个成员到第一个成员）")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("indexOf")]),s._v("方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回"),a("code",[s._v("-1")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("lastIndexOf")]),s._v("方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回"),a("code",[s._v("-1")]),s._v("。注意，这两个方法不能用来搜索"),a("code",[s._v("NaN")]),s._v("的位置，即它们无法确定数组成员是否包含"),a("code",[s._v("NaN")]),s._v("。")])])]),s._v(" "),a("h3",{attrs:{id:"链式使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式使用"}},[s._v("#")]),s._v(" 链式使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var users = [\n  {name: 'tom', email: 'tom@example.com'},\n  {name: 'peter', email: 'peter@example.com'}\n];\n\nusers\n.map(function (user) {\n  return user.email;\n})\n.filter(function (email) {\n  return /^t/.test(email);\n})\n.forEach(function (email) {\n  console.log(email);\n});\n// \"tom@example.com\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"过滤唯一值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤唯一值"}},[s._v("#")]),s._v(" 过滤唯一值")]),s._v(" "),a("p",[a("code",[s._v("Set")]),s._v("类型是在 "),a("code",[s._v("ES6")]),s._v("中新增的，它类似于数组，但是成员的值都是唯一的，没有重复的值。")]),s._v(" "),a("p",[s._v("结合扩展运算符（...）我们可以创建一个新的数组，达到过滤原数组重复值的功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const array = [1, 2, 3, 3, 5, 5, 1];\nconst uniqueArray = [...new Set(array)];\nconsole.log(uniqueArray); // [1, 2, 3, 5]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("这个技巧的适用范围是数组中的数值的类型为： "),a("code",[s._v("undefined")]),s._v("， "),a("code",[s._v("null")]),s._v("， "),a("code",[s._v("boolean")]),s._v("， "),a("code",[s._v("string")]),s._v("， "),a("code",[s._v("number")]),s._v("。")]),s._v(" "),a("p",[s._v("当包涵 "),a("code",[s._v("object")]),s._v("， "),a("code",[s._v("function")]),s._v("， "),a("code",[s._v("array")]),s._v("时，则不适用。")])]),s._v(" "),a("h3",{attrs:{id:"数组循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组循环"}},[s._v("#")]),s._v(" 数组循环")]),s._v(" "),a("h3",{attrs:{id:"数组空位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组空位"}},[s._v("#")]),s._v(" 数组空位")]),s._v(" "),a("p",[s._v("当数组的某个位置是空元素，即两个逗号之间没有任何值，我们称该数组存在空位（hole）。")]),s._v(" "),a("p",[s._v("如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = [1, 2, 3,];\na.length // 3\na // [1, 2, 3]\n数组的空位是可以读取的，返回undefined。\nvar a = [, , ,];\na[1] // undefined\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("使用"),a("code",[s._v("delete")]),s._v("命令删除一个数组成员，会形成空位，并且不会影响"),a("code",[s._v("length")]),s._v("属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = [1, 2, 3];\ndelete a[1];\na[1] // undefined\na.length // 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("数组的某个位置是空位，与某个位置是"),a("code",[s._v("undefined")]),s._v("，是不一样的。如果是空位，使用数组的"),a("code",[s._v("forEach")]),s._v("方法、"),a("code",[s._v("for...in")]),s._v("结构、以及"),a("code",[s._v("Object.keys")]),s._v("方法进行遍历，空位都会被跳过。如果某个位置是"),a("code",[s._v("undefined")]),s._v("，遍历的时候就不会被跳过。")]),s._v(" "),a("p",[s._v("空位就是数组没有这个元素，所以不会被遍历到，而"),a("code",[s._v("undefined")]),s._v("则表示数组有这个元素，值是"),a("code",[s._v("undefined")]),s._v("，所以遍历不会跳过。")]),s._v(" "),a("h3",{attrs:{id:"数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[s._v("#")]),s._v(" 数组去重")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const arr = [1, 1, 2, 3, 3];\n// 期望得到：[1, 2, 3]\n\n// 方法一：for 配合新数组截取\nconst newArr1 = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (!newArr1.includes(arr[i])) {\n    newArr1.push(arr[i]); \n  }\n}\nconsole.log('newArr1：', newArr1);\n\n// 方法二：使用 Set\nconst newArr2 = [...new Set(arr)];\nconsole.log('newArr2：', newArr2);\n\n// 方法三：使用 filter\nconst newArr3 = arr.filter((item, index) => arr.lastIndexOf(item) === index);\nconsole.log('newArr3：', newArr3);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h3",{attrs:{id:"多维数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[s._v("#")]),s._v(" 多维数组")]),s._v(" "),a("p",[a("code",[s._v("reduce()")]),s._v(" 二维降一维")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const newArr = oldArr.reduce((prev, curr) => (prev.concat(curr)), []);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("concat()")]),s._v(" 二维降一维")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const oldArr = [1, 2, [3, 4]];\nconst newArr = [].concat(...oldArr);\nconst newnewArr = Array.prototype.concat.apply([], oldArr);\nconsole.log(newArr);\n// [1, 2, 3, 4]\nconsole.log(newnewArr);\n// [1, 2, 3, 4]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v("flat()")]),s._v(" 二维降一维")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const oldArr = [1, 2, [3, 4]];\nconst newArr = oldArr.flat();\nconsole.log(newArr);\n// [1, 2, 3, 4]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("多维降一维数组递归降维，这里有两个方法：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("forEach")]),s._v(" 递归")]),s._v(" "),a("li",[a("code",[s._v("reduce")]),s._v(" 递归")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const oldArr = [\n  1,\n  [\n    2, [3],\n    [4, 5, 6],\n    [7, 8, 9],\n    10,\n    11,\n  ],\n  12,\n  13,\n  14,\n  [15, 16, 17],\n];\nconst newArr = [];\nconst ergodic = (arr) => {\n  arr.forEach((item) => {\n    if (Array.isArray(item)) {\n      ergodic(item);\n    } else {\n      newArr.push(item);\n    }\n  })\n}\nergodic(oldArr, newArr);\nconsole.log(newArr);\n// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ]\n//或\nconst ergodic = (arr) => arr.reduce((prev, curr, index, list) => {\n  if (Array.isArray(curr)) {\n    return prev.concat(...ergodic(curr));\n  }\n  return prev.concat(curr);\n}, []);\n\nconst newArr = ergodic(oldArr);\nconsole.log(newArr);\n// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("flat 降维")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("arr.flat(depth)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("depth")]),s._v(" 即拉平几层默认拉平一层")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("flat()")]),s._v(" 拉平数组过程中，会移除数组的空项：")]),s._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("什么是构造函数？")]),s._v(" "),a("p",[s._v("当任意一个普通函数用于创建一个类对象时，它就被称作构造函数，或构造器。")]),s._v(" "),a("p",[s._v("它有几点特性：")]),s._v(" "),a("ol",[a("li",[s._v("默认函数首字母大写")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v("new")]),s._v(" 调用一个函数")]),s._v(" "),a("li",[s._v("构造函数返回的是一个对象")])]),s._v(" "),a("h3",{attrs:{id:"new做了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new做了什么"}},[s._v("#")]),s._v(" new做了什么")]),s._v(" "),a("p",[s._v("要创建 Person 的新实例，必须使用 new 操作符。以这种方式调用构造函数实际上会经历以下 4\n个步骤：\n(1) 创建一个新对象；\n(2) 链接新创建的对象和构造函数的原型对象（就是将新对象的隐式原型"),a("code",[s._v("__proto__")]),s._v("指向构造函数的原型对象"),a("code",[s._v("prototype")]),s._v("）；\n(3) 执行构造函数中的代码，并将构造函数中的this指向新的对象（为这个新对象添加属性） ；\n(4) 返回新对象。")]),s._v(" "),a("h4",{attrs:{id:"new-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-操作符"}},[s._v("#")]),s._v(" "),a("strong",[s._v("new 操作符")])]),s._v(" "),a("p",[s._v("能完成传统面向对象的class + new的方式创建对象。")]),s._v(" "),a("p",[a("strong",[s._v("var obj = new  Base();")])]),s._v(" "),a("p",[s._v("new操作符具体干了什么呢?")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建了一个空对象obj")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将这个空对象的__proto__成员指向了Base函数对象prototype成员对象")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将Base函数对象的this指针替换成obj，然后再调用Base函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建一个带引用的变量")]),s._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//给f增加一个属性_proto_指向构建函数的原型，即f._proto_ = Fun.prototype")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行Fun.call(f,a,b)，即创建Fun函数的执行上下文，其中this指向f")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回f")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("实现一个new函数：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法一")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("_new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.拿到传入的参数中的第一个参数，即构造函数名Func")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" Func "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.创建一个空对象obj,并让其继承Func.prototype")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3.执行构造函数，并将this指向创建的空对象obj")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4.返回创建的对象obj")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法二")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("_new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建一个空的简单 JavaScript 对象（即{}）；")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链接该对象（即设置该对象的构造函数）到另一个对象 ；（ 通俗理解就是新对象隐式原型__proto__链接到构造函数显式原型prototype上。）")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//新创建的对象作为 this 的上下文 ；（ 实际是执行了构造函数 并将构造函数作用域指向新对象 ）")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[object Object]"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果该函数没有返回对象，则返回 this。（ 实际是返回一个空对象， new Object()就是返回一个空对象{} ）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法三")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"function"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"newOperator function the first param must be a function"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ES6 new.target 是指向构造函数")]),s._v("\n  newOperator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.创建一个全新的对象，")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.并且执行[[Prototype]]链接")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ES5 arguments转成数组 当然也可以用ES6 [...arguments], Aarry.from(arguments);")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 除去constructor构造函数的其余参数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" argsArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3.生成的新对象会绑定到函数调用的`this`。")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取到constructor函数返回结果")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ctorReturnResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" argsArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 小结4 中这些类型中合并起来只有Object和Function两种类型 typeof null 也是'object'所以要不等于null，排除null")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" isObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" ctorReturnResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"object"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" ctorReturnResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" isFunction "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" ctorReturnResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"function"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" isFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ctorReturnResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`, `Error`)，那么`new`表达式中的函数调用会自动返回这个新的对象。")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" newObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法四")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createNew")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建新的空对象")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//解构获得构造函数和参数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链接对象到函数原型")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行构造函数，将构造函数中的this指向obj对象")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果函数没有返回对象，就返回新创建的对象")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"object"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建Person构造函数，参数为name,age")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n　　"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n　　"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" xm "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("_new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xiaoming'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br")])]),a("h3",{attrs:{id:"arguments-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-对象"}},[s._v("#")]),s._v(" arguments 对象")]),s._v(" "),a("p",[s._v("在函数代码中，使用特殊对象 arguments，开发者"),a("em",[s._v("无需明确指出参数名")]),s._v("，就能访问它们。无论定义了几个参数，ECMAScript 可以接受任意多个参数（最多 25 个）")]),s._v(" "),a("p",[a("strong",[s._v("闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。")])]),s._v(" "),a("p",[s._v("常规函数，有一个"),a("code",[s._v("prototype")]),s._v("属性，它是一个带有"),a("code",[s._v("constructor")]),s._v("属性的对象（原型对象）。 然而，箭头函数，没有这个"),a("code",[s._v("prototype")]),s._v("属性。 访问"),a("code",[s._v("prototype")]),s._v("属性时会返回"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("... args")]),s._v("是剩余参数，剩余参数的值是一个包含所有剩余参数的数组，"),a("strong",[s._v("并且只能作为最后一个参数")]),s._v("。剩余参数是第二个参数，这是不可能的，并会抛出语法错误。")]),s._v(" "),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[s._v("#")]),s._v(" 对象")]),s._v(" "),a("h3",{attrs:{id:"创建-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-2"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {};//对象字面量\nlet obj=new Object({'name':'ross','age':18})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"变量如何做属性名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量如何做属性名"}},[s._v("#")]),s._v(" "),a("strong",[s._v("变量如何做属性名")])]),s._v(" "),a("p",[s._v("之前都是用"),a("code",[s._v("常量")]),s._v("做属性名")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let p1='name'\nlet obj={p1:'ross'}//属性名为'p1'\nlet obj={[p1]:'ross'}//属性名为'name'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意区别:")]),s._v(" "),a("ol",[a("li",[s._v("不加[]的属性名会自动变成字符串")]),s._v(" "),a("li",[s._v("加了[]则会当作变量求值")]),s._v(" "),a("li",[s._v("值不是字符串，则会自动变成字符串")])]),s._v(" "),a("h3",{attrs:{id:"判断对象的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断对象的类型"}},[s._v("#")]),s._v(" 判断对象的类型")]),s._v(" "),a("p",[s._v("Object.prototype.toString.call()")]),s._v(" "),a("p",[s._v("判断基本类型：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Null]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Undefined]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“abc”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object String]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Number]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Boolean]”")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("判断原生引用类型：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数类型")]),s._v("\nFunction "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“test”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Function]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//日期类型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Date]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//数组类型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Array]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//正则表达式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[hbc]at")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gi")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object RegExp]”")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//自定义类型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Rose"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//”[object Object]”")]),s._v("\n很明显这种方法不能准确判断person是Person类的实例，而只能用"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" 操作符来进行判断，如下所示：\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出结果为true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("JavaScript 的所有其他对象都继承自"),a("code",[s._v("Object")]),s._v("对象，即那些对象都是"),a("code",[s._v("Object")]),s._v("的实例。")]),s._v(" "),a("p",[a("code",[s._v("Object")]),s._v("对象的原生方法分成两类："),a("code",[s._v("Object")]),s._v("本身的方法与"),a("code",[s._v("Object")]),s._v("的实例方法。")]),s._v(" "),a("p",[a("strong",[a("code",[s._v("Object")]),s._v("对象本身的方法")])]),s._v(" "),a("p",[s._v("所谓“本身的方法”就是直接定义在"),a("code",[s._v("Object")]),s._v("对象的方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.print = function (o) { console.log(o) };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[a("code",[s._v("Object")]),s._v("的实例方法")])]),s._v(" "),a("p",[s._v("所谓实例方法就是定义在"),a("code",[s._v("Object")]),s._v("原型对象"),a("code",[s._v("Object.prototype")]),s._v("上的方法。")]),s._v(" "),a("p",[s._v("它可以被"),a("code",[s._v("Object")]),s._v("实例直接使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.prototype.print = function () {\n  console.log(this);\n};\nvar obj = new Object();\nobj.print() // Object\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"静态方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-2"}},[s._v("#")]),s._v(" 静态方法")]),s._v(" "),a("p",[s._v("所谓“静态方法”，是指部署在"),a("code",[s._v("Object")]),s._v("对象自身的方法。")]),s._v(" "),a("p",[a("code",[s._v("Object.keys")]),s._v("方法和"),a("code",[s._v("Object.getOwnPropertyNames")]),s._v("方法都用来遍历对象的属性。")]),s._v(" "),a("h4",{attrs:{id:"object-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[s._v("#")]),s._v(" "),a("code",[s._v("Object.keys")])]),s._v(" "),a("p",[s._v("方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。")]),s._v(" "),a("h4",{attrs:{id:"object-getownpropertynames"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[s._v("#")]),s._v(" "),a("code",[s._v("Object.getOwnPropertyNames")])]),s._v(" "),a("p",[s._v("方法与"),a("code",[s._v("Object.keys")]),s._v("类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。")]),s._v(" "),a("p",[s._v("对于一般的对象来说，"),a("code",[s._v("Object.keys()")]),s._v("和"),a("code",[s._v("Object.getOwnPropertyNames()")]),s._v("返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。"),a("code",[s._v("Object.keys")]),s._v("方法只返回可枚举的属性。"),a("code",[s._v("Object.getOwnPropertyNames")]),s._v("方法还返回不可枚举的属性名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var a = [\'Hello\', \'World\'];\nObject.keys(a) // ["0", "1"]\nObject.getOwnPropertyNames(a) // ["0", "1", "length"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("计算对象属性的个数\nObject.keys(obj).length // 2\nObject.getOwnPropertyNames(obj).length // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("（1）对象属性模型的相关方法")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Object.getOwnPropertyDescriptor()")]),s._v("：获取某个属性的描述对象。")]),s._v(" "),a("li",[a("code",[s._v("Object.defineProperty()")]),s._v("：通过描述对象，定义某个属性。")]),s._v(" "),a("li",[a("code",[s._v("Object.defineProperties()")]),s._v("：通过描述对象，定义多个属性。")])]),s._v(" "),a("p",[a("strong",[s._v("（2）控制对象状态的方法")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Object.preventExtensions()")]),s._v("：防止对象扩展。")]),s._v(" "),a("li",[a("code",[s._v("Object.isExtensible()")]),s._v("：判断对象是否可扩展。")]),s._v(" "),a("li",[a("code",[s._v("Object.seal()")]),s._v("：禁止对象配置。")]),s._v(" "),a("li",[a("code",[s._v("Object.isSealed()")]),s._v("：判断一个对象是否可配置。")]),s._v(" "),a("li",[a("code",[s._v("Object.freeze()")]),s._v("：冻结一个对象。")]),s._v(" "),a("li",[a("code",[s._v("Object.isFrozen()")]),s._v("：判断一个对象是否被冻结。")])]),s._v(" "),a("p",[a("strong",[s._v("（3）原型链相关方法")])]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Object.create()")]),s._v("：该方法可以指定原型对象和属性，返回一个新的对象。创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。它接收两个参数，不过第二个可选参数是属性描述符（不常用，默认是"),a("code",[s._v("undefined")]),s._v("）。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.getPrototypeOf()")]),s._v("：获取对象的"),a("code",[s._v("Prototype")]),s._v("对象。")])])]),s._v(" "),a("h3",{attrs:{id:"实例方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-2"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),a("p",[s._v("方法定义在"),a("code",[s._v("Object.prototype")]),s._v("对象。它们称为实例方法。所有"),a("code",[s._v("Object")]),s._v("的实例对象都继承了这些方法。")]),s._v(" "),a("p",[a("code",[s._v("Object")]),s._v("实例对象的方法，主要有以下六个。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Object.prototype.valueOf()")]),s._v("：返回当前对象对应的值。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.prototype.toString()")]),s._v("：返回当前对象对应的字符串形式。")]),s._v(" "),a("p",[s._v("数组、字符串、函数、Date 对象都分别部署了自定义的"),a("code",[s._v("toString")]),s._v("方法，覆盖了"),a("code",[s._v("Object.prototype.toString")]),s._v("方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.prototype.toLocaleString()")]),s._v("：返回当前对象对应的本地字符串形式。")]),s._v(" "),a("p",[s._v("数组、函数、Date 对象都分别部署了自定义的toLocaleString方法，覆盖了Object.prototype.toLocaleString方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.prototype.hasOwnProperty()")]),s._v("：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {\n  p: 123\n};\nobj.hasOwnProperty('p') // true\nobj.hasOwnProperty('toString') // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.prototype.isPrototypeOf()")]),s._v("：判断当前对象是否为另一个对象的原型。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Object.prototype.propertyIsEnumerable()")]),s._v("：判断某个属性是否可枚举。")])])]),s._v(" "),a("h2",{attrs:{id:"属性描述对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性描述对象"}},[s._v("#")]),s._v(" 属性描述对象")]),s._v(" "),a("p",[s._v("JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n  get: undefined,\n  set: undefined\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("属性描述对象提供6个元属性。")]),s._v(" "),a("p",[s._v("（1）"),a("code",[s._v("value")])]),s._v(" "),a("p",[a("code",[s._v("value")]),s._v("是该属性的属性值，默认为"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("p",[s._v("（2）"),a("code",[s._v("writable")])]),s._v(" "),a("p",[a("code",[s._v("writable")]),s._v("是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("p",[s._v("（3）"),a("code",[s._v("enumerable")])]),s._v(" "),a("p",[a("code",[s._v("enumerable")]),s._v("是一个布尔值，表示该属性是否可遍历，默认为"),a("code",[s._v("true")]),s._v("。如果设为"),a("code",[s._v("false")]),s._v("，会使得某些操作（比如"),a("code",[s._v("for...in")]),s._v("循环、"),a("code",[s._v("Object.keys()")]),s._v("）跳过该属性。")]),s._v(" "),a("p",[s._v("（4）"),a("code",[s._v("configurable")])]),s._v(" "),a("p",[a("code",[s._v("configurable")]),s._v("是一个布尔值，表示可配置性，默认为"),a("code",[s._v("true")]),s._v("。如果设为"),a("code",[s._v("false")]),s._v("，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（"),a("code",[s._v("value")]),s._v("属性除外）。也就是说，"),a("code",[s._v("configurable")]),s._v("属性控制了属性描述对象的可写性。")]),s._v(" "),a("p",[s._v("（5）"),a("code",[s._v("get")])]),s._v(" "),a("p",[a("code",[s._v("get")]),s._v("是一个函数，表示该属性的取值函数（getter），默认为"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("p",[s._v("（6）"),a("code",[s._v("set")])]),s._v(" "),a("p",[a("code",[s._v("set")]),s._v("是一个函数，表示该属性的存值函数（setter），默认为"),a("code",[s._v("undefined")]),s._v("。etters 并不保存一个实际值，它们的使命在于 "),a("em",[s._v("修改")]),s._v(" 属性。当调用方法 "),a("code",[s._v("setter")]),s._v("， 返回 "),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"object-getownpropertydescriptor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor"}},[s._v("#")]),s._v(" Object.getOwnPropertyDescriptor()")]),s._v(" "),a("p",[a("code",[s._v("Object.getOwnPropertyDescriptor()")]),s._v("方法可以获取属性描述对象。它的第一个参数是目标对象，第二个参数是一个字符串，对应目标对象的某个属性名。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = { p: 'a' };\nObject.getOwnPropertyDescriptor(obj, 'p')\n// Object { value: \"a\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n注意，Object.getOwnPropertyDescriptor()方法只能用于对象自身的属性，不能用于继承的属性。\nvar obj = { p: 'a' };\nObject.getOwnPropertyDescriptor(obj, 'toString')\n// undefined\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"object-getownpropertynames-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames-2"}},[s._v("#")]),s._v(" Object.getOwnPropertyNames()")]),s._v(" "),a("p",[a("code",[s._v("Object.getOwnPropertyNames")]),s._v("方法返回一个数组，成员是参数对象自身的全部属性的属性名，不管该属性是否可遍历。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var obj = Object.defineProperties({}, {\n  p1: { value: 1, enumerable: true },\n  p2: { value: 2, enumerable: false }\n});\nObject.getOwnPropertyNames(obj)\n// ["p1", "p2"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"object-defineproperty-、object-defineproperties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-、object-defineproperties"}},[s._v("#")]),s._v(" Object.defineProperty()、Object.defineProperties()")]),s._v(" "),a("p",[a("code",[s._v("Object.defineProperty()")]),s._v("方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.defineProperty(object, propertyName, attributesObject)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("Object.defineProperty")]),s._v("方法接受三个参数，依次如下。")]),s._v(" "),a("ul",[a("li",[s._v("object：属性所在的对象")]),s._v(" "),a("li",[s._v("propertyName：字符串，表示属性名")]),s._v(" "),a("li",[s._v("attributesObject：属性描述对象")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = Object.defineProperty({}, 'p', {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\nobj.p // 123\nobj.p = 246;\nobj.p // 123\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("如果一次性定义或修改多个属性，可以使用"),a("code",[s._v("Object.defineProperties()")]),s._v("方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var obj = Object.defineProperties({}, {\n  p1: { value: 123, enumerable: true },\n  p2: { value: \'abc\', enumerable: true },\n  p3: { get: function () { return this.p1 + this.p2 },\n    enumerable:true,\n    configurable:true\n  }\n});\nobj.p1 // 123\nobj.p2 // "abc"\nobj.p3 // "123abc"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("注意，一旦定义了取值函数"),a("code",[s._v("get")]),s._v("（或存值函数"),a("code",[s._v("set")]),s._v("），就不能将"),a("code",[s._v("writable")]),s._v("属性设为"),a("code",[s._v("true")]),s._v("，或者同时定义"),a("code",[s._v("value")]),s._v("属性，否则会报错。")]),s._v(" "),a("p",[a("code",[s._v("Object.defineProperty()")]),s._v("和"),a("code",[s._v("Object.defineProperties()")]),s._v("参数里面的属性描述对象，"),a("code",[s._v("writable")]),s._v("、"),a("code",[s._v("configurable")]),s._v("、"),a("code",[s._v("enumerable")]),s._v("这三个属性的默认值都为"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"object-prototype-propertyisenumerable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-propertyisenumerable"}},[s._v("#")]),s._v(" Object.prototype.propertyIsEnumerable()")]),s._v(" "),a("p",[s._v("实例对象的"),a("code",[s._v("propertyIsEnumerable()")]),s._v("方法返回一个布尔值，用来判断某个属性是否可遍历。注意，这个方法只能用于判断对象自身的属性，对于继承的属性一律返回"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {};\nobj.p = 123;\nobj.propertyIsEnumerable('p') // true\nobj.propertyIsEnumerable('toString') // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"存取器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[s._v("#")]),s._v(" 存取器")]),s._v(" "),a("p",[s._v("除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为"),a("code",[s._v("setter")]),s._v("，使用属性描述对象的"),a("code",[s._v("set")]),s._v("属性；取值函数称为"),a("code",[s._v("getter")]),s._v("，使用属性描述对象的"),a("code",[s._v("get")]),s._v("属性。")]),s._v(" "),a("p",[s._v("一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如定制属性的读取和赋值行为。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = Object.defineProperty({}, 'p', {\n  get: function () {\n    return 'getter';\n  },\n  set: function (value) {\n    console.log('setter: ' + value);\n  }\n});\nobj.p // \"getter\"\nobj.p = 123 // \"setter: 123\"\n// 写法二\nvar obj = {\n  get p() {\n    return 'getter';\n  },\n  set p(value) {\n    console.log('setter: ' + value);\n  }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("注意，取值函数"),a("code",[s._v("get")]),s._v("不能接受参数，存值函数"),a("code",[s._v("set")]),s._v("只能接受一个参数（即属性的值）。")]),s._v(" "),a("h3",{attrs:{id:"对象的拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的拷贝"}},[s._v("#")]),s._v(" 对象的拷贝")]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("Object.defineProperty")]),s._v("方法来拷贝属性。")]),s._v(" "),a("h3",{attrs:{id:"控制对象状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制对象状态"}},[s._v("#")]),s._v(" 控制对象状态")]),s._v(" "),a("p",[s._v("有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，")]),s._v(" "),a("ul",[a("li",[s._v("最弱的一种是"),a("code",[s._v("Object.preventExtensions")])]),s._v(" "),a("li",[s._v("其次是"),a("code",[s._v("Object.seal")])]),s._v(" "),a("li",[s._v("最强的是"),a("code",[s._v("Object.freeze")])])]),s._v(" "),a("p",[a("code",[s._v("Object.preventExtensions")]),s._v("方法可以使得一个对象无法再添加新的属性。")]),s._v(" "),a("p",[a("code",[s._v("Object.isExtensible")]),s._v("方法用于检查一个对象是否使用了"),a("code",[s._v("Object.preventExtensions")]),s._v("方法。也就是说，检查是否可以为一个对象添加属性。")]),s._v(" "),a("p",[a("code",[s._v("Object.seal")]),s._v("方法使得一个对象既无法添加新属性，也无法删除旧属性。")]),s._v(" "),a("p",[a("code",[s._v("Object.isSealed")]),s._v("方法用于检查一个对象是否使用了"),a("code",[s._v("Object.seal")]),s._v("方法。")]),s._v(" "),a("p",[a("code",[s._v("Object.freeze")]),s._v("方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。然而，它仅 对对象进行 "),a("em",[s._v("浅")]),s._v(" 冻结，意味着只有 对象中的 "),a("em",[s._v("直接")]),s._v(" 属性被冻结。如果属性是另一个 object，像案例中的 "),a("code",[s._v("address")]),s._v("，"),a("code",[s._v("address")]),s._v(" 中的属性没有被冻结，仍然可以被修改。")]),s._v(" "),a("p",[a("code",[s._v("Object.isFrozen")]),s._v("方法用于检查一个对象是否使用了"),a("code",[s._v("Object.freeze")]),s._v("方法。")]),s._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),a("p",[s._v("字符串是有零个或者多个字符组成的有序数列。如果字符串的个数为零，则表明这个字符串为 "),a("strong",[s._v("空串（Null String）")]),s._v("，长度为 0。空串表示为："),a("code",[s._v("''")]),s._v("。")]),s._v(" "),a("p",[s._v("如果字符串由空格组成，那么它就不是空串，而是有 n 个空格长度的字符串，例如："),a("code",[s._v("' '")]),s._v("（它包含了一个空格，所以长度为 1）。")]),s._v(" "),a("h3",{attrs:{id:"静态方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-3"}},[s._v("#")]),s._v(" 静态方法")]),s._v(" "),a("h3",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[s._v("#")]),s._v(" 实例属性")]),s._v(" "),a("p",[s._v("String.prototype.length")]),s._v(" "),a("h3",{attrs:{id:"实例方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-3"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("charAt")]),s._v("方法返回指定位置的字符，参数是从"),a("code",[s._v("0")]),s._v("开始编号的位置。")]),s._v(" "),a("li",[a("code",[s._v("charCodeAt()")]),s._v("方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于"),a("code",[s._v("String.fromCharCode()")]),s._v("的逆操作。")]),s._v(" "),a("li",[a("code",[s._v("concat")]),s._v("方法用于连接两个字符串，返回一个新字符串，不改变原字符串。")]),s._v(" "),a("li",[a("code",[s._v("indexOf")]),s._v("方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回"),a("code",[s._v("-1")]),s._v("，就表示不匹配。")]),s._v(" "),a("li",[a("code",[s._v("lastIndexOf")]),s._v("方法的用法跟"),a("code",[s._v("indexOf")]),s._v("方法一致，主要的区别是"),a("code",[s._v("lastIndexOf")]),s._v("从尾部开始匹配，"),a("code",[s._v("indexOf")]),s._v("则是从头部开始匹配。")]),s._v(" "),a("li",[a("code",[s._v("localeCompare")]),s._v("方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。")]),s._v(" "),a("li",[a("code",[s._v("match")]),s._v("方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("matchAll()")]),s._v("返回一个包含所有匹配正则表达式及分组捕获结果的迭代器")]),s._v(" "),a("li",[s._v("padEnd在当前字符串尾部填充指定的字符串，直到达到指定的长度。返回一个新的字符串。")]),s._v(" "),a("li",[s._v("padStart在当前字符串头部填充指定的字符串，直到达到指定的长度。返回一个新的字符串。")]),s._v(" "),a("li",[a("code",[s._v("replace")]),s._v("方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有"),a("code",[s._v("g")]),s._v("修饰符的正则表达式）。")]),s._v(" "),a("li",[s._v("repeat返回指定重复次数的由元素组成的字符串对象。")]),s._v(" "),a("li",[a("code",[s._v("split")]),s._v("方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。")]),s._v(" "),a("li",[a("code",[s._v("slice()")]),s._v("方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。")]),s._v(" "),a("li",[a("code",[s._v("substring")]),s._v("方法用于从原字符串取出子字符串并返回，不改变原字符串，跟"),a("code",[s._v("slice")]),s._v("方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。")]),s._v(" "),a("li",[a("code",[s._v("substr")]),s._v("方法用于从原字符串取出子字符串并返回，不改变原字符串，跟"),a("code",[s._v("slice")]),s._v("和"),a("code",[s._v("substring")]),s._v("方法的作用相同。")]),s._v(" "),a("li",[a("code",[s._v("search")]),s._v("方法的用法基本等同于"),a("code",[s._v("match")]),s._v("，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回"),a("code",[s._v("-1")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("toLowerCase")]),s._v("方法用于将一个字符串全部转为小写，"),a("code",[s._v("toUpperCase")]),s._v("则是全部转为大写。它们都返回一个新字符串，不改变原字符串。")]),s._v(" "),a("li",[s._v("toLocaleLowerCase根据当前区域设置，将符串中的字符转换成小写。对于大多数语言来说，toLowerCase 的返回值是一致的。")]),s._v(" "),a("li",[s._v("toLocaleUpperCase根据当前区域设置，将字符串中的字符转换成大写，对于大多数语言来说，toUpperCase的返回值是一致的。")]),s._v(" "),a("li",[s._v("toUpperCase将字符串转换成大写并返回。")]),s._v(" "),a("li",[s._v("toString返回用字符串表示的特定对象。")]),s._v(" "),a("li",[a("code",[s._v("trim")]),s._v("方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。")]),s._v(" "),a("li",[s._v("trimEnd()/trimRight从字符串的右侧去除空格。")]),s._v(" "),a("li",[s._v("trimStart/trimLeft从字符串的左侧去除空格。")])]),s._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" Symbol")]),s._v(" "),a("p",[a("code",[s._v("Symbol")]),s._v("类型是不可枚举的。"),a("code",[s._v("Object.keys")]),s._v("方法返回对象上的所有可枚举的键属性。"),a("code",[s._v("Symbol")]),s._v("类型是不可见的，并返回一个空数组。 记录整个对象时，所有属性都是可见的，甚至是不可枚举的属性。")]),s._v(" "),a("p",[s._v("这是"),a("code",[s._v("Symbol")]),s._v("的众多特性之一：除了表示完全唯一的值（防止对象意外名称冲突，例如当使用2个想要向同一对象添加属性的库时），您还可以"),a("code",[s._v("隐藏")]),s._v("这种方式对象的属性（尽管不完全。你仍然可以使用"),a("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("方法访问 "),a("code",[s._v("Symbol")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[s._v("#")]),s._v(" JSON")]),s._v(" "),a("p",[s._v("JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式")]),s._v(" "),a("blockquote",[a("ol",[a("li",[s._v("复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。")]),s._v(" "),a("li",[s._v("原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和"),a("code",[s._v("null")]),s._v("（不能使用"),a("code",[s._v("NaN")]),s._v(", "),a("code",[s._v("Infinity")]),s._v(", "),a("code",[s._v("-Infinity")]),s._v("和"),a("code",[s._v("undefined")]),s._v("）。")]),s._v(" "),a("li",[s._v("字符串必须使用双引号表示，不能使用单引号。")]),s._v(" "),a("li",[s._v("对象的键名必须放在双引号里面。")]),s._v(" "),a("li",[s._v("数组或对象最后一个成员的后面，不能加逗号。")])])]),s._v(" "),a("h3",{attrs:{id:"静态方法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-4"}},[s._v("#")]),s._v(" 静态方法")]),s._v(" "),a("h4",{attrs:{id:"json-stringify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[s._v("#")]),s._v(" "),a("code",[s._v("JSON.stringify()")])]),s._v(" "),a("p",[s._v("转成 JSON 字符串。注意，对于原始类型的字符串，转换结果会带双引号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('JSON.stringify(\'foo\') === "foo" // false\nJSON.stringify(\'foo\') === "\\"foo\\"" // true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果对象的属性是"),a("code",[s._v("undefined")]),s._v("、函数或 XML 对象，该属性会被"),a("code",[s._v("JSON.stringify()")]),s._v("过滤。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var obj = {\n  a: undefined,\n  b: function () {}\n};\nJSON.stringify(obj) // "{}"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如果数组的成员是"),a("code",[s._v("undefined")]),s._v("、函数或 XML 对象，则这些值被转成"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var arr = [undefined, function () {}];\nJSON.stringify(arr) // "[null,null]"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("正则对象会被转成空对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('JSON.stringify(/foo/) // "{}"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("JSON.stringify()")]),s._v("方法会忽略对象的不可遍历的属性。")]),s._v(" "),a("p",[a("code",[s._v("JSON.stringify()")]),s._v("方法还可以接受一个数组，作为第二个参数，指定参数对象的哪些属性需要转成字符串。这个类似白名单的数组，只对对象的属性有效，对数组无效。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {\n  'prop1': 'value1',\n  'prop2': 'value2',\n  'prop3': 'value3'\n};\nvar selectedProperties = ['prop1', 'prop2'];\nJSON.stringify(obj, selectedProperties)\n// \"{\"prop1\":\"value1\",\"prop2\":\"value2\"}\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("第二个参数还可以是一个函数，用来更改"),a("code",[s._v("JSON.stringify()")]),s._v("的返回值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function f(key, value) {\n  if (typeof value === "number") {\n    value = 2 * value;\n  }\n  return value;\n}\nJSON.stringify({ a: 1, b: 2 }, f)\n// \'{"a": 2,"b": 4}\'\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果处理函数返回"),a("code",[s._v("undefined")]),s._v("或没有返回值，则该属性会被忽略。")]),s._v(" "),a("p",[a("code",[s._v("JSON.stringify()")]),s._v("还可以接受第三个参数，用于增加返回的 JSON 字符串的可读性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 分行输出\nJSON.stringify({ p1: 1, p2: 2 }, null, \'\\t\')\n// {\n// \t"p1": 1,\n// \t"p2": 2\n// }\n第三个属性如果是一个数字，则表示每个属性前面添加的空格（最多不超过10个）。\nJSON.stringify({ p1: 1, p2: 2 }, null, 2);\n/*\n"{\n  "p1": 1,\n  "p2": 2\n}"\n*/\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("如果参数对象有自定义的"),a("code",[s._v("toJSON()")]),s._v("方法，那么"),a("code",[s._v("JSON.stringify()")]),s._v("会使用这个方法的返回值作为参数，而忽略原对象的其他属性。")]),s._v(" "),a("h4",{attrs:{id:"json-parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-parse"}},[s._v("#")]),s._v(" "),a("code",[s._v("JSON.parse()")])]),s._v(" "),a("p",[a("code",[s._v("JSON.parse()")]),s._v("方法用于将 JSON 字符串转换成对应的值。")]),s._v(" "),a("p",[a("code",[s._v("JSON.parse()")]),s._v("方法可以接受一个处理函数，作为第二个参数，")]),s._v(" "),a("h2",{attrs:{id:"原型与原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型链"}},[s._v("#")]),s._v(" 原型与原型链")]),s._v(" "),a("p",[s._v("原型：")]),s._v(" "),a("p",[s._v("原型对象：")]),s._v(" "),a("p",[s._v("每个构造函数都有一个prototype属性，指向构造函数的原型对象，这个原型对象指向有一个construtor属性指回这个构造函数。通过这个属性可以共享属性和方法。构造函数内的属性和方法不可以共享。")]),s._v(" "),a("p",[s._v("原型链：")]),s._v(" "),a("p",[s._v("可看做是一个搜索链，实例属性和方法的查找轨迹。")]),s._v(" "),a("p",[s._v("每个实例都有一个proto属性，当我们使用构造函数去创建实例时，实例的"),a("code",[s._v("__proto__")]),s._v("属性就会指向构造函数的原型对象。")]),s._v(" "),a("p",[s._v("每个对象都有一个proto属性，通过这个属性可以查找原型对象中的属性和方法，如果找不到，继续查找原型对象的原型对象的属性和方法，直到Object.prototype."),a("strong",[s._v("proto")]),s._v(" = null,这个过程就是原型链。")]),s._v(" "),a("p",[s._v("prototype 被定义为：给其它对象提供共享属性的对象。")]),s._v(" "),a("p",[a("strong",[s._v("所有 object 对象都有一个隐式引用")])]),s._v(" "),a("p",[s._v("通过原型，解决了构造函数共享实例方法的问题。原型对象默认有个constructor属性，如果指定实例的原型对象，则constructor也会改变。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("构造函数 "),a("code",[s._v("funciton Person() {}")])])]),s._v(" "),a("li",[a("p",[s._v("实例 "),a("code",[s._v("const person = new Person()")])])]),s._v(" "),a("li",[a("p",[s._v("原型 "),a("code",[s._v("Person.prototype")])])]),s._v(" "),a("li",[a("p",[s._v("隐藏属性 "),a("code",[s._v("constructor")])]),s._v(" "),a("p",[s._v("等式 1："),a("code",[s._v("person.constructor === Person")])]),s._v(" "),a("p",[s._v("等式 2："),a("code",[s._v("Person.prototype.constructor === Person")])])]),s._v(" "),a("li",[a("p",[s._v("new")])]),s._v(" "),a("li",[a("p",[s._v("查找实例对应的对象的原型 "),a("code",[s._v("person.__proto__ === Person.prototype")])])]),s._v(" "),a("li",[a("p",[s._v("函数对象指向")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("person.__proto__ === Person.prototype\nPerson.__proto__ === Function.prototype\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("普通对象指向")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("obj.__proto__ === Object.prototype\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("原型链")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("foo.__proto__ === Object.prototype\nF.__proto__ === Function.prototype\nF.__proto__.__proto__ === Object.prototype\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])]),s._v(" "),a("p",[s._v("其中每个 "),a("strong",[s._v("函数对象")]),s._v(" 都有一个 "),a("code",[s._v("prototype")]),s._v(" 属性，这个属性的指向被称为这个函数对象的 "),a("strong",[s._v("原型对象")]),s._v("（简称原型）。")]),s._v(" "),a("p",[s._v("在 JavaScript 中，每个实例都会有个隐藏属性 "),a("code",[s._v("constructor")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("实例的属性 "),a("code",[s._v("constructor")]),s._v(" 指向构造函数")])]),s._v(" "),a("p",[s._v("同时，这个函数的原型的 "),a("code",[s._v("constructor")]),s._v(" 会指向这个函数：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在 JavaScript 中，每个 JavaScript 对象（普通对象和函数对象）都具有一个属性 "),a("code",[s._v("__proto__")]),s._v("，这个属性会指向该对象的原型。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'哈哈'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\nPerson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("Person.prototype."),a("code",[s._v("__proto__")])]),s._v(" "),a("p",[a("strong",[s._v("通过 "),a("code",[s._v("__proto__")]),s._v(" 最终查找到的是 "),a("code",[s._v("null")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("person.__proto__.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var F = function() {};\nObject.prototype.a = function() {\n  console.log('a');\n};\nFunction.prototype.b = function() {\n  console.log('b');\n}\nvar f = new F();\nf.a(); // 输出啥？\nf.b(); // 输出啥？\nF.a(); // 输出啥？\nF.b(); // 输出啥？\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("f.a() -> a\nf.b() -> f.b is not a function\nF.a() -> a\nF.b() -> b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("解析")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var F = function() {};\nvar f = new F();\n\n    f.__proto__ === F.prototype\n    F.__proto__ === Function.prototype\n    f.__proto__.__proto__ === Object.prototype\nf.a() 会先查找 f 自身存在 a 属性否；如果不存在，往 F 原型 F.prototype 上，看看有没有 a 否；如果不存在，往 Object.prototype 上找，发现 a。\n而 f.b 就没有了，它可以通过 F.__proto__ 去查找到，因为定义到 Function.prototype 上了。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Promise")]),s._v(" 对象是一个构造函数，用来生成 "),a("code",[s._v("Promise")]),s._v(" 实例。")]),s._v(" "),a("li",[a("code",[s._v("new Promise()")]),s._v(" 传入一个函数，这个函数可以带 2 个参数："),a("code",[s._v("resolve")]),s._v(" 和 "),a("code",[s._v("reject")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("resolve")]),s._v(" 的作用是将 "),a("code",[s._v("Promise")]),s._v(" 对象的状态从 “未完成” 变为 “成功”（"),a("code",[s._v("pending -> resolved")]),s._v("）")]),s._v(" "),a("li",[a("code",[s._v("reject")]),s._v(" 的作用是将 "),a("code",[s._v("Promise")]),s._v(" 对象的状态从 “未完成” 变为 “失败”（"),a("code",[s._v("pending -> rejected")]),s._v("）")]),s._v(" "),a("li",[s._v("在没有执行 "),a("code",[s._v("resolve")]),s._v(" 和 "),a("code",[s._v("reject")]),s._v(" 之前，它们还是 "),a("code",[s._v("pending")]),s._v(" 的。")])]),s._v(" "),a("p",[a("strong",[a("code",[s._v("Promise")]),s._v(" 有 3 种状态："),a("code",[s._v("pending")]),s._v("、"),a("code",[s._v("fulfilled")]),s._v("、"),a("code",[s._v("rejected")])])]),s._v(" "),a("p",[s._v("Promise 的 "),a("code",[s._v("all")]),s._v(" 方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。")]),s._v(" "),a("p",[a("code",[s._v("Promise.race()")]),s._v(" 方法是谁先走完谁先输出。")]),s._v(" "),a("p",[a("code",[s._v("Promise.all()")]),s._v(" 和 "),a("code",[s._v("Promise.race()")]),s._v(" 用法：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v(".all()")]),s._v(" 作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。")]),s._v(" "),a("li",[a("code",[s._v(".race()")]),s._v(" 作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。")])]),s._v(" "),a("p",[s._v("小总结：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("Promise.all().then()")]),s._v(" 结果中的数组的顺序和 "),a("code",[s._v("Promise.all()")]),s._v(" 接收到的数组的顺序一致，并不会因为 "),a("code",[s._v("setTimeout")]),s._v(" 的输出而改变。")]),s._v(" "),a("li",[a("code",[s._v("Promise.all()")]),s._v(" 和 "),a("code",[s._v("Promise.then()")]),s._v(" 碰到会抛出异常的情况，都只会抛出最先出现问题的那个，被 "),a("code",[s._v(".then()")]),s._v(" 的第二个参数或者 "),a("code",[s._v(".catch()")]),s._v(" 捕获，但是不会影响数组中其他的异步任务的执行。")])]),s._v(" "),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[s._v("#")]),s._v(" 关键字")]),s._v(" "),a("h2",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[s._v("#")]),s._v(" this")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("this")]),s._v("是一个"),a("strong",[s._v("关键字")]),s._v("，"),a("strong",[a("code",[s._v("this")]),s._v("无法被重写")])]),s._v(" "),a("li",[a("code",[s._v("this")]),s._v("被"),a("strong",[s._v("自动定义")]),s._v("在所有函数的作用域中")])]),s._v(" "),a("p",[a("code",[s._v("this")]),s._v("关键字是一个非常重要的语法点。不管是什么场合，"),a("code",[s._v("this")]),s._v("都有一个共同点：它总是返回一个对象。"),a("code",[s._v("this")]),s._v("可以用在构造函数之中，表示实例对象。")]),s._v(" "),a("p",[s._v("简单说，"),a("code",[s._v("this")]),s._v("就是属性或方法“当前”所在的对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var person = {\n  name: '张三',\n  describe: function () {\n    return '姓名：'+ this.name;\n  }\n};\nperson.describe()\n\nfunction f() {\n  return '姓名：'+ this.name;\n}\n\nvar A = {\n  name: '张三',\n  describe: f\n};\n\nvar B = {\n  name: '李四',\n  describe: f\n};\n\nA.describe() // \"姓名：张三\"\nB.describe() // \"姓名：李四\"\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("只要函数被赋给另一个变量，"),a("code",[s._v("this")]),s._v("的指向就会变。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var A = {\n  name: '张三',\n  describe: function () {\n    return '姓名：'+ this.name;\n  }\n};\n\nvar name = '李四';\nvar f = A.describe;\nf() // \"姓名：李四\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("A.describe")]),s._v("被赋值给变量"),a("code",[s._v("f")]),s._v("，内部的"),a("code",[s._v("this")]),s._v("就会指向"),a("code",[s._v("f")]),s._v("运行时所在的对象（本例是顶层对象）。")]),s._v(" "),a("p",[s._v("使用场合")]),s._v(" "),a("p",[a("strong",[s._v("（1）全局环境")])]),s._v(" "),a("p",[s._v("全局环境使用"),a("code",[s._v("this")]),s._v("，它指的就是顶层对象"),a("code",[s._v("window")]),s._v("。")]),s._v(" "),a("p",[s._v("不管是不是在函数内部，只要是在全局环境下运行，"),a("code",[s._v("this")]),s._v("就是指顶层对象"),a("code",[s._v("window")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("（2）构造函数")])]),s._v(" "),a("p",[s._v("构造函数中的"),a("code",[s._v("this")]),s._v("，指的是实例对象。")]),s._v(" "),a("p",[a("strong",[s._v("（3）对象的方法")])]),s._v(" "),a("p",[s._v("如果对象的方法里面包含"),a("code",[s._v("this")]),s._v("，"),a("code",[s._v("this")]),s._v("的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变"),a("code",[s._v("this")]),s._v("的指向。")]),s._v(" "),a("p",[a("strong",[s._v("注意点")])]),s._v(" "),a("ul",[a("li",[s._v("避免多层 this")]),s._v(" "),a("li",[s._v("避免数组处理方法中的 this")]),s._v(" "),a("li",[s._v("避免回调函数中的 this")])]),s._v(" "),a("p",[a("strong",[s._v("绑定 this 的方法")])]),s._v(" "),a("p",[a("code",[s._v("this")]),s._v("的动态切换，固然为 JavaScript 创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把"),a("code",[s._v("this")]),s._v("固定下来，避免出现意想不到的情况。JavaScript 提供了"),a("code",[s._v("call")]),s._v("、"),a("code",[s._v("apply")]),s._v("、"),a("code",[s._v("bind")]),s._v("这三个方法，来切换/固定"),a("code",[s._v("this")]),s._v("的指向。")]),s._v(" "),a("h3",{attrs:{id:"this的绑定规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this的绑定规则"}},[s._v("#")]),s._v(" this的绑定规则")]),s._v(" "),a("h4",{attrs:{id:"默认绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认绑定"}},[s._v("#")]),s._v(" 默认绑定")]),s._v(" "),a("p",[s._v("默认绑定比较典型的一种判断就是："),a("strong",[s._v("当使用不带任何修饰的函数引用进行调用时，只能使用默认绑定，而不能使用其他绑定规则")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Window非严格模式下，如果应用了默认规则，那么this的值会指向Window对象")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在严格模式下，使用默认规则得到的this值会指向undefined，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"隐式绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式绑定"}},[s._v("#")]),s._v(" 隐式绑定")]),s._v(" "),a("p",[s._v("当函数作为某个对象的方法调用时，此时这个对象就是函数的上下文对象，这时候"),a("code",[s._v("this")]),s._v("会指向这个对象")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//{foo: ƒ}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h5",{attrs:{id:"隐式丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式丢失"}},[s._v("#")]),s._v(" "),a("strong",[s._v("隐式丢失")])]),s._v(" "),a("p",[s._v("隐式绑定的函数，在有些情况下会丢失绑定的上下文对象，这时候就会应用我们的"),a("strong",[s._v("默认绑定")]),s._v("规则，把"),a("code",[s._v("this")]),s._v("指向"),a("code",[s._v("Window对象")]),s._v("（非严格模式）或者"),a("code",[s._v("undefined")]),s._v("（严格模式）。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var name = "我是全局的name";\nvar obj = {\n  name: "我是obj的name",\n  foo: function () {\n    console.log(this.name); //我是全局的name\n  },\n};\nlet fn = obj.foo; //这里用变量fn保存foo函数\nfn();\n')])])]),a("p",[s._v("当我们执行"),a("code",[s._v("let fn = obj.foo")]),s._v("时，实际上是将"),a("code",[s._v("fn")]),s._v("指向了函数"),a("code",[s._v("foo")]),s._v("的地址，因此当我们执行"),a("code",[s._v("fn()")]),s._v("的时候实际上就是在执行"),a("code",[s._v("foo()")])]),s._v(" "),a("p",[s._v("隐式丢失还有一种情况，就是对象的方法作为参数传递到另外的函数中去")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var name = "我是全局的name";\nvar obj = {\n  name: "我是obj的name",\n  foo: function () {\n    console.log(this.name); //我是全局的name\n  },\n};\n\nfunction otherFn(fn) {\n  fn();\n}\notherFn(obj.foo);\n')])])]),a("p",[s._v("参数在传递给函数的时候，会发生一个赋值操作，也就是将"),a("strong",[s._v("实参赋值给形参")])]),s._v(" "),a("h5",{attrs:{id:"对象属性引用链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象属性引用链"}},[s._v("#")]),s._v(" "),a("strong",[s._v("对象属性引用链")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var obj1 = {\n  name: "obj1",\n  obj2: {\n    name: "obj2",\n    obj3: {\n      name: "obj3",\n      foo: function () {\n        console.log(this.name); //obj3\n      },\n    },\n  },\n};\nobj1.obj2.obj3.foo();\n')])])]),a("h4",{attrs:{id:"显式绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式绑定"}},[s._v("#")]),s._v(" 显式绑定")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("call的用法")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var obj = {\n  name: "obj",\n};\nfunction foo() {\n  console.log(this.name);\t//obj\n}\nfoo.call(obj);\n')])])])]),s._v(" "),a("li",[a("p",[s._v("apply的用法")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var obj = {\n  name: "obj",\n};\nfunction foo() {\n  console.log(this.name);\t//obj\n}\nfoo.apply(obj);\n')])])])]),s._v(" "),a("li",[a("p",[s._v("bind的用法")]),s._v(" "),a("p",[a("code",[s._v("bind")]),s._v("函数可以传入指定对象作为"),a("code",[s._v("this")]),s._v("的指向对象，除此之外，"),a("code",[s._v("bind")]),s._v("函数还可以接受参数并存储起来，下次调用的时候可以只传入剩余的参数，")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//还是刚刚隐式丢失的例子，我们使用bind函数绑定上obj对象看看")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"我是全局的name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"我是obj的name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("otherFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//会发现函数被传入进来以后，this依然指向obj而没有发生隐式丢失")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//我是obj的name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("otherFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//我们这里不直接传入，而是把obj.foo包装一下再传入")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//绑定this的同时存储参数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//第一个参数为null时，非严格模式下会以Window对象作为this指向值，后面会介绍")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//给foo函数套了层壳子，并存储了两个参数1,2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" bindFoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当调用这个包装函数的时候，传入的参数会连同之前存储的参数一起传给foo函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bindFoo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1 2 3")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])])])]),s._v(" "),a("p",[s._v("call与apply区别参数不同，"),a("code",[s._v("call")]),s._v("函数接收多个参数并传入"),a("code",[s._v("foo")]),s._v("函数中，而"),a("code",[s._v("apply")]),s._v("函数接收的参数放在了一个数组里，然后拆分开来传入了"),a("code",[s._v("foo")]),s._v("函数中，")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('var obj = {\n  name: "obj",\n};\nfunction foo(a,b,c) {\n  console.log(this.name,a,b,c);\t//obj 1 2 3\n}\nfoo.call(obj,1,2,3);\nfoo.apply(obj,[1,2,3]);\n')])])]),a("h4",{attrs:{id:"new绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new绑定"}},[s._v("#")]),s._v(" new绑定")]),s._v(" "),a("p",[a("code",[s._v("new")]),s._v("操作符也可以实现改变"),a("code",[s._v("this")]),s._v("指向，")]),s._v(" "),a("ul",[a("li",[s._v("创建一个新对象，将this绑定到新创建的对象")]),s._v(" "),a("li",[s._v("使用传入的参数调用构造函数")]),s._v(" "),a("li",[s._v("将创建的对象的_proto__指向构造函数的prototype")]),s._v(" "),a("li",[s._v("如果构造函数没有显式返回一个对象，则返回创建的新对象，否则返回显式返回的对象（即手动返回的对象）")])]),s._v(" "),a("h4",{attrs:{id:"箭头函数绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数绑定"}},[s._v("#")]),s._v(" 箭头函数绑定")]),s._v(" "),a("p",[s._v("箭头函数中的"),a("code",[s._v("this")]),s._v("比较特殊，它的指向值不是动态决定的，而是由函数定义时作用域中包含的"),a("code",[s._v("this")]),s._v("值确定的，")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('//定义一个箭头函数\nvar foo = () => {\n  console.log(this.name);\n};\nvar name = "我是全局的name";\nvar obj1 = {\n  name: "我是obj1的name",\n};\n\nfoo.call(obj1); // "我是全局的name"\n')])])]),a("h3",{attrs:{id:"绑定规则的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定规则的优先级"}},[s._v("#")]),s._v(" 绑定规则的优先级")]),s._v(" "),a("p",[s._v("由低到高进行排序的话就是：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("默认绑定")])]),s._v(" "),a("li",[a("strong",[s._v("隐式绑定")])]),s._v(" "),a("li",[a("strong",[s._v("显示绑定")])]),s._v(" "),a("li",[a("strong",[s._v("new操作符绑定、箭头函数")])])]),s._v(" "),a("h3",{attrs:{id:"call、apply、bind区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call、apply、bind区别"}},[s._v("#")]),s._v(" call、apply、bind区别")]),s._v(" "),a("p",[s._v("相同之处："),a("strong",[s._v("改变函数体内 this 的指向。")])]),s._v(" "),a("p",[s._v("不同之处：")]),s._v(" "),a("ul",[a("li",[s._v("call、apply的区别：接受参数的方式不一样。")]),s._v(" "),a("li",[s._v("bind：不立即执行。而apply、call 立即执行。")])]),s._v(" "),a("p",[s._v("在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。")]),s._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[s._v("此处若传入"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("或"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("，这里的"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("就会指向全局对象，在浏览器中就是window\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("call、apply区别：")]),s._v(" "),a("p",[s._v("参数不一样call多个参数，apply是数组。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//数组追加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" array1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Joe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2458")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" array2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Doe"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("555")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" array2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//array1 值为  [12 , "foo" , {name:"Joe"} , -2458 , "Doe" , 555 , 100] ')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//最大值最小值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v("  numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("458")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("215")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" maxInNumbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//458")]),s._v("\n    maxInNumbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("458")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("215")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//458")]),s._v("\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("利用bind实现柯里化")]),s._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[s._v("function "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n不改变this指向，传入undefined或者null均可\n100会赋值给第一个参数a，相当于a=100\n因此func(1,2)=a+b+c=100+1+2=103\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("undefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 103")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n对func再次bind，a已经被绑定，200会赋值给b，相当于b=100\n因此func(10)=a+b+c=100+200+10=310\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" func2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("undefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 310")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"错误类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误类型"}},[s._v("#")]),s._v(" 错误类型")]),s._v(" "),a("p",[s._v("当值不是预期类型时，会抛出"),a("code",[s._v("TypeErrors")]),s._v("。 JavaScript期望"),a("code",[s._v("name")]),s._v("是一个函数，因为我们试图调用它。 但它是一个字符串，因此抛出"),a("code",[s._v("TypeError")]),s._v("："),a("code",[s._v("name is not a function")])]),s._v(" "),a("p",[s._v("当你编写了一些非有效的JavaScript时，会抛出语法错误，例如当你把"),a("code",[s._v("return")]),s._v("这个词写成"),a("code",[s._v("retrun")]),s._v("时。 当JavaScript无法找到您尝试访问的值的引用时，抛出"),a("code",[s._v("ReferenceErrors")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[s._v("#")]),s._v(" 类型转换")]),s._v(" "),a("h3",{attrs:{id:"转换boolean型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换boolean型"}},[s._v("#")]),s._v(" 转换Boolean型")]),s._v(" "),a("p",[s._v("常规的boolean型值只有 "),a("code",[s._v("true")]),s._v(" 和 "),a("code",[s._v("false")]),s._v("，但是在JavaScript中我们可以将其他的值认为是 "),a("code",[s._v("‘truthy’")]),s._v(" 或者 "),a("code",[s._v("‘falsy’")]),s._v("的。")]),s._v(" "),a("p",[s._v("除了 "),a("code",[s._v("0")]),s._v("， "),a("code",[s._v("“”")]),s._v("， "),a("code",[s._v("null")]),s._v("， "),a("code",[s._v("undefined")]),s._v("， "),a("code",[s._v("NaN")]),s._v(" 和 "),a("code",[s._v("false")]),s._v(",其他的我们都可以认为是 "),a("code",[s._v("‘truthy’")]),s._v("的。")]),s._v(" "),a("p",[s._v("我们可以通过负运算符 "),a("code",[s._v("！")]),s._v("将一系列的变量转换成“boolean”型。")]),s._v(" "),a("h3",{attrs:{id:"转换string型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换string型"}},[s._v("#")]),s._v(" 转换String型")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("+")]),s._v("连接运算符将一个number类型的变量转换成string类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const val = 1 + "";console.log(val); // Result: "1"console.log(typeof val); // Result: "string"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"转换number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换number类型"}},[s._v("#")]),s._v(" 转换Number类型")]),s._v(" "),a("p",[s._v("通过加法运算符 "),a("code",[s._v("+")]),s._v("将一个string类型的变量转回为number 类型的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let int = "15";int = +int;console.log(int); // Result: 15console.log(typeof int); Result: "number"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"快速float转integer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速float转integer"}},[s._v("#")]),s._v(" 快速Float转Integer")]),s._v(" "),a("p",[s._v("平时可以使用 "),a("code",[s._v("Math.floor(),Math.ceil()和Math.round()")]),s._v("将 "),a("code",[s._v("float")]),s._v("类型转换成 "),a("code",[s._v("integer")]),s._v("类型。")]),s._v(" "),a("p",[s._v("但是还有一种更快的方法可以使用 "),a("code",[s._v("|(位或运算符)")]),s._v("将浮点数截断为整数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(23.9 | 0);  // Result: 23console.log(-23.9 | 0); // Result: -23\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("|")]),s._v(" 的行为取决于处理的是正数还是负数，所以最好只在确定的情况下使用这个快捷方式。")]),s._v(" "),a("p",[s._v("如果n是正数的，则 "),a("code",[s._v("n|0")]),s._v(" 有效地向下舍入。")]),s._v(" "),a("p",[s._v("如果n是负数的，它则有效地向上取整。")]),s._v(" "),a("h2",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[s._v("#")]),s._v(" Event Loop")]),s._v(" "),a("p",[s._v("JS 是单线程执行的，指的是一个进程里只有一个主线程")]),s._v(" "),a("p",[a("strong",[s._v("进程是 CPU资源分配的最小单位；线程是 CPU调度的最小单位")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"多进程与多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程与多线程"}},[s._v("#")]),s._v(" 多进程与多线程")]),s._v(" "),a("ul",[a("li",[s._v("多进程：在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如你可以听歌的同时，打开编辑器敲代码，编辑器和听歌软件的进程之间丝毫不会相互干扰。")]),s._v(" "),a("li",[s._v("多线程：程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。")])]),s._v(" "),a("h3",{attrs:{id:"浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[s._v("#")]),s._v(" 浏览器内核")]),s._v(" "),a("p",[s._v("浏览器内核是通过取得页面内容、整理信息（应用CSS）、计算和组合最终输出可视化的图像结果，通常也被称为渲染引擎。")]),s._v(" "),a("p",[s._v("浏览器内核是多线程，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：")]),s._v(" "),a("ul",[a("li",[s._v("GUI 渲染线程")]),s._v(" "),a("li",[s._v("JavaScript引擎线程")]),s._v(" "),a("li",[s._v("定时触发器线程")]),s._v(" "),a("li",[s._v("事件触发线程")]),s._v(" "),a("li",[s._v("异步http请求线程")])]),s._v(" "),a("h4",{attrs:{id:"gui渲染线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui渲染线程"}},[s._v("#")]),s._v(" GUI渲染线程")]),s._v(" "),a("ul",[a("li",[s._v("主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。")]),s._v(" "),a("li",[s._v("当界面需要重绘或者由于某种操作引发回流时，将执行该线程。")]),s._v(" "),a("li",[s._v("该线程与JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起，当任务队列空闲时，主线程才会去执行GUI渲染。")])]),s._v(" "),a("h4",{attrs:{id:"js引擎线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js引擎线程"}},[s._v("#")]),s._v(" JS引擎线程")]),s._v(" "),a("ul",[a("li",[s._v("该线程当然是主要负责处理 JavaScript脚本，执行代码。")]),s._v(" "),a("li",[s._v("也是主要负责执行准备好待执行的事件，即定时器计数结束，或者异步请求成功并正确返回时，将依次进入任务队列，等待 JS引擎线程的执行。")]),s._v(" "),a("li",[s._v("当然，该线程与 GUI渲染线程互斥，当 JS引擎线程执行 JavaScript脚本时间过长，将导致页面渲染的阻塞。")])]),s._v(" "),a("h4",{attrs:{id:"定时器触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器触发线程"}},[s._v("#")]),s._v(" 定时器触发线程")]),s._v(" "),a("ul",[a("li",[s._v("负责执行异步定时器一类的函数的线程，如： setTimeout，setInterval。")]),s._v(" "),a("li",[s._v("主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理，当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。")])]),s._v(" "),a("h4",{attrs:{id:"事件触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件触发线程"}},[s._v("#")]),s._v(" 事件触发线程")]),s._v(" "),a("ul",[a("li",[s._v("主要负责将准备好的事件交给 JS引擎线程执行。")])]),s._v(" "),a("p",[s._v("比如 setTimeout定时器计数结束， ajax等异步请求成功并触发回调函数，或者用户触发点击事件时，该线程会将整装待发的事件依次加入到任务队列的队尾，等待 JS引擎线程的执行。")]),s._v(" "),a("h4",{attrs:{id:"异步http请求线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步http请求线程"}},[s._v("#")]),s._v(" 异步http请求线程")]),s._v(" "),a("ul",[a("li",[s._v("负责执行异步请求一类的函数的线程，如： Promise，axios，ajax等。")]),s._v(" "),a("li",[s._v("主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理，当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部，等待JS引擎线程执行。")])]),s._v(" "),a("h3",{attrs:{id:"浏览器中的-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的-event-loop"}},[s._v("#")]),s._v(" 浏览器中的 Event Loop")]),s._v(" "),a("p",[s._v("浏览器端事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。"),a("strong",[s._v("宏任务队列可以有多个，微任务队列只有一个")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("常见的 macro-task 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。")]),s._v(" "),a("li",[s._v("常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/10/1683863633586974?imageView2/0/w/1280/h/960/ignore-error/1",alt:"img"}})]),s._v(" "),a("p",[s._v("一开始执行栈空,我们可以把"),a("strong",[s._v("执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则")]),s._v("。micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码）。")]),s._v(" "),a("p",[s._v("全局上下文（script 标签）被推入执行栈，同步代码执行。在执行的过程中，会判断是同步任务还是异步任务，通过对一些接口的调用，可以产生新的 macro-task 与 micro-task，它们会分别被推入各自的任务队列里。同步代码执行完了，script 脚本会被移出 macro 队列，这个过程本质上是队列的 macro-task 的执行和出队的过程。")]),s._v(" "),a("p",[s._v("上一步我们出队的是一个 macro-task，这一步我们处理的是 micro-task。但需要注意的是：当 macro-task 出队时，任务是"),a("strong",[s._v("一个一个")]),s._v("执行的；而 micro-task 出队时，任务是"),a("strong",[s._v("一队一队")]),s._v("执行的。因此，我们处理 micro 队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空。")]),s._v(" "),a("p",[a("strong",[s._v("执行渲染操作，更新界面")])]),s._v(" "),a("p",[s._v("检查是否存在 Web worker 任务，如果有，则对其进行处理")]),s._v(" "),a("p",[s._v("上述过程循环往复，直到两个队列都清空")]),s._v(" "),a("p",[a("strong",[s._v("当某个宏任务执行完后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，会读取宏任务队列中排在最前的任务，执行宏任务的过程中，遇到微任务，依次加入微任务队列。栈空后，再次读取微任务队列里的任务，依次类推。")])]),s._v(" "),a("h3",{attrs:{id:"node-中的-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-中的-event-loop"}},[s._v("#")]),s._v(" Node 中的 Event Loop")]),s._v(" "),a("p",[s._v("Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现（下文会详细介绍）。")]),s._v(" "),a("p",[s._v("Node.js的运行机制如下:")]),s._v(" "),a("ul",[a("li",[s._v("V8引擎解析JavaScript脚本。")]),s._v(" "),a("li",[s._v("解析后的代码，调用Node API。")]),s._v(" "),a("li",[s._v("libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。")]),s._v(" "),a("li",[s._v("V8引擎再将结果返回给用户。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/12/16841bd9860c1ee9?imageView2/0/w/1280/h/960/ignore-error/1",alt:"img"}})]),s._v(" "),a("p",[s._v("Node端事件循环中的异步队列也是这两种：macro（宏任务）队列和 micro（微任务）队列。")]),s._v(" "),a("ul",[a("li",[s._v("常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作等。")]),s._v(" "),a("li",[s._v("常见的 micro-task 比如: process.nextTick、new Promise().then(回调)等。")])]),s._v(" "),a("h3",{attrs:{id:"node与浏览器的-event-loop-差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node与浏览器的-event-loop-差异"}},[s._v("#")]),s._v(" Node与浏览器的 Event Loop 差异")]),s._v(" "),a("p",[a("strong",[s._v("浏览器环境下，microtask的任务队列是每个macrotask执行完之后执行。而在Node.js中，microtask会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行microtask队列的任务")]),s._v("。")]),s._v(" "),a("p",[s._v("浏览器和Node 环境下，microtask 任务队列的执行时机不同")]),s._v(" "),a("ul",[a("li",[s._v("Node端，microtask 在事件循环的各个阶段之间执行")]),s._v(" "),a("li",[s._v("浏览器端，microtask 在事件循环的 macrotask 执行完之后执行")])]),s._v(" "),a("h2",{attrs:{id:"简写技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简写技巧"}},[s._v("#")]),s._v(" 简写技巧")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("声明变量")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nlet x;\nlet y = 20;\n//Shorthand\nlet x, y = 20;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("给多个变量赋值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//使用数组解构来在一行中给多个变量赋值\n//Longhand\nlet a, b, c;\na = 5;\nb = 8;\nc = 12;\n//Shorthand\nlet [a, b, c] = [5, 8, 12];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("三元运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nlet marks = 26;\nlet result;\nif(marks >= 30){\n result = 'Pass';\n}else{\n result = 'Fail';\n}\n//Shorthand\nlet result = marks >= 30 ? 'Pass' : 'Fail';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("赋默认值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("使用 OR(||) 短路运算来给一个变量赋默认值，如果预期值不正确的情况下。\n//Longhand\nlet imagePath;\nlet path = getImagePath();\nif(path !== null && path !== undefined && path !== '') {\n  imagePath = path;\n} else {\n  imagePath = 'default.jpg';\n}\n//Shorthand\nlet imagePath = getImagePath() || 'default.jpg';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("与 (&&) 短路运算")]),s._v(" "),a("p",[s._v("只有当某个变量为 true 时调用一个函数，那么你可以使用"),a("code",[s._v("与 (&&)")]),s._v("短路形式书写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nif (isLoggedin) {\n goToHomepage();\n}\n//Shorthand\nisLoggedin && goToHomepage();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("交换两个变量")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("为了交换两个变量，我们通常使用第三个变量。我们可以使用数组解构赋值来交换两个变量。\nlet x = 'Hello', y = 55;\n//Longhand\nconst temp = x;\nx = y;\ny = temp;\n//Shorthand\n[x, y] = [y, x];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("箭头函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nfunction add(num1, num2) {\n   return num1 + num2;\n}\n//Shorthand\nconst add = (num1, num2) => num1 + num2;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("模板字符串")]),s._v(" "),a("p",[s._v("一般使用 + 运算符来连接字符串变量。使用 "),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650082586&idx=2&sn=b9e6b18e835e4734e7f10073004235fe&chksm=83db907fb4ac1969c61de3c093cd9cc4c74d9bd721d30974348017ad46a96f2d3f66c832821c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES6"),a("OutboundLink")],1),s._v(" 的模板字符串，我们可以用一种更简单的方法实现这一点。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nconsole.log('You got a missed call from ' + number + ' at ' + time);\n//Shorthand\nconsole.log(`You got a missed call from ${number} at ${time}`);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("多行字符串")]),s._v(" "),a("p",[s._v("对于多行字符串，我们一般使用 + 运算符以及一个新行转义字符（\\n）。我们可以使用 (`) 以一种更简单的方式实现。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nconsole.log('JavaScript, often abbreviated as JS, is a\\n' + 'programming language that conforms to the \\n' +\n'ECMAScript specification. JavaScript is high-level,\\n' +\n'often just-in-time compiled, and multi-paradigm.' );\n//Shorthand\nconsole.log(`JavaScript, often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled, and multi-paradigm.`);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("多条件检查")]),s._v(" "),a("p",[s._v("对于多个值匹配，我们可以将所有的值放到数组中，然后使用"),a("code",[s._v("indexOf()")]),s._v("或"),a("code",[s._v("includes()")]),s._v("方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nif (value === 1 || value === 'one' || value === 2 || value === 'two') {\n     // Execute some code\n}\n// Shorthand 1\nif ([1, 'one', 2, 'two'].indexOf(value) >= 0) {\n    // Execute some code\n}\n// Shorthand 2\nif ([1, 'one', 2, 'two'].includes(value)) {\n    // Execute some code\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("对象属性复制")]),s._v(" "),a("p",[s._v("如果变量名和对象的属性名相同，那么我们只需要在对象语句中声明变量名，而不是同时声明键和值。"),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&mid=2650080728&idx=1&sn=878299088f22dbd4ca2c35c801a84822&chksm=83db98bdb4ac11ab74df0ce0f705055d391c7c5d2ba8a56b2fb839d0bc883d0ede678679b5ab&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript"),a("OutboundLink")],1),s._v(" 会自动将键作为变量的名，将值作为变量的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let firstname = 'Amitav';\nlet lastname = 'Mishra';\n//Longhand\nlet obj = {firstname: firstname, lastname: lastname};\n//Shorthand\nlet obj = {firstname, lastname};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("字符串转成数字")]),s._v(" "),a("p",[s._v("有一些内置的方法，例如"),a("code",[s._v("parseInt")]),s._v("和"),a("code",[s._v("parseFloat")]),s._v("可以用来将字符串转为数字。我们还可以简单地在字符串前提供一个一元运算符 (+) 来实现这一点。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nlet total = parseInt('453');\nlet average = parseFloat('42.6');\n//Shorthand\nlet total = +'453';\nlet average = +'42.6';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("重复一个字符串多次")]),s._v(" "),a("p",[s._v("为了重复一个字符串 N 次，你可以使用"),a("code",[s._v("for")]),s._v("循环。但是使用"),a("code",[s._v("repeat()")]),s._v("方法，我们可以一行代码就搞定。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nlet str = '';\nfor(let i = 0; i < 5; i ++) {\n  str += 'Hello ';\n}\nconsole.log(str); // Hello Hello Hello Hello Hello\n// Shorthand\n'Hello '.repeat(5);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("指数幂")]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("Math.pow()")]),s._v("方法来得到一个数字的幂。有一种更短的语法来实现，即双星号 (**)。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nconst power = Math.pow(4, 3); // 64\n// Shorthand\nconst power = 4**3; // 64\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("双非位运算符 (~~)")]),s._v(" "),a("p",[s._v("双非位运算符是"),a("code",[s._v("Math.floor()")]),s._v("方法的缩写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//Longhand\nconst floor = Math.floor(6.8); // 6\n// Shorthand\nconst floor = ~~6.8; // 6\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("找出数组中的最大和最小数字")]),s._v(" "),a("p",[s._v("使用 for 循环来遍历数组中的每一个值，然后找出最大或最小值。我们还可以使用 Array.reduce() 方法来找出数组中的最大和最小数字。但是使用扩展符号，我们一行就可以实现。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/ Shorthand\nconst arr = [2, 8, 15, 4];\nMath.max(...arr); // 15\nMath.min(...arr); // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("For 循环")]),s._v(" "),a("p",[s._v("为了遍历一个数组，我们一般使用传统的"),a("code",[s._v("for")]),s._v("循环。我们可以使用"),a("code",[s._v("for...of")]),s._v("来遍历数组。为了获取每个值的索引，我们可以使用"),a("code",[s._v("for...in")]),s._v("循环。")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("for...in")]),s._v("循环来遍历对象属性。")])]),s._v(" "),a("li",[a("p",[s._v("合并数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr1 = [20, 30];\n//Longhand\nlet arr2 = arr1.concat([60, 80]);\n// [20, 30, 60, 80]\n//Shorthand\nlet arr2 = [...arr1, 60, 80];\n// [20, 30, 60, 80]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("深拷贝多级对象")]),s._v(" "),a("p",[s._v("为了深拷贝一个多级对象，我们要遍历每一个属性并检查当前属性是否包含一个对象。如果当前属性包含一个对象，然后要将当前属性值作为参数递归调用相同的方法（例如，嵌套的对象）。")]),s._v(" "),a("p",[s._v("我们可以使用"),a("code",[s._v("JSON.stringify()")]),s._v("和"),a("code",[s._v("JSON.parse()")]),s._v("，如果我们的对象不包含函数、undefined、NaN 或日期值的话。")]),s._v(" "),a("p",[s._v("如果有一个单级对象，例如没有嵌套的对象，那么我们也可以使用扩展符来实现深拷贝。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let obj = {x: 20, y: {z: 30}};\n//Longhand\nconst makeDeepClone = (obj) => {\n  let newObject = {};\n  Object.keys(obj).map(key => {\n    if(typeof obj[key] === 'object'){\n      newObject[key] = makeDeepClone(obj[key]);\n    } else {\n      newObject[key] = obj[key];\n    }\n  });\n return newObject;\n}\nconst cloneObj = makeDeepClone(obj);\n//Shorthand\nconst cloneObj = JSON.parse(JSON.stringify(obj));\n//Shorthand for single level object\nlet obj = {x: 20, y: 'hello'};\nconst cloneObj = {...obj};\n如果你的对象包含 function, undefined or NaN 值的话，JSON.parse(JSON.stringify(obj)) 就不会有效。因为当你 JSON.stringify 对象的时候，包含 function, undefined or NaN 值的属性会从对象中移除。因此，当你的对象只包含字符串和数字值时，可以使用JSON.parse(JSON.stringify(obj))。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("获取字符串中的字符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let str = 'jscurious.com';\n//Longhand\nstr.charAt(2); // c\n//Shorthand\nstr[2]; // c\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[s._v("#")]),s._v(" 实践")]),s._v(" "),a("p",[a("strong",[s._v("优先使用===，而不是==")])]),s._v(" "),a("p",[s._v("JavaScript使用两种相等性操作符：===|!==和==|!=。通常认为做比较的最佳实践是使用前一组操作符。")]),s._v(" "),a("p",[a("strong",[s._v("Eval就是糟糕的代名词")])]),s._v(" "),a("p",[s._v("对于那些不熟悉JavaScript的人来说，函数”evel”让我们能够访问JavaScript编译器。我们可以通过给”eval”传递一个字符串参数来得到该字符串执行的结果。")]),s._v(" "),a("p",[s._v("这不仅会极大地降低你的脚本的性能，也会造成一个巨大的安全隐患，因为这赋予传递进来的纯文本太多的能力。要尽可能地避免eval函数的使用。")]),s._v(" "),a("p",[a("strong",[s._v("在For语句之外声明变量")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var container = document.getElementById('container');\nfor(var i = 0, len = someArray.length; i < len; i++) {    \ncontainer.innerHtml += 'my number: ' + i;    \nconsole.log(i);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("构建字符串的最快方式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var arr = ['item 1', 'item 2', 'item 3', ...];\nvar list = '<ul><li>' + arr.join('</li><li>') + '</li></ul>';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("减少全局变量")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var DudeNameSpace = {    name: 'Jeffrey',    lastname: 'Way',    doSometing: function() {...}}\nconsole.log(DudeNameSpace.name);   \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("通过将全局的东西封装进单个命名空间，能够大大降低与其他应用、部件、代码库交互混乱的概率。”— Douglas Crockford")]),s._v(" "),a("p",[a("strong",[s._v("注释你的代码")])]),s._v(" "),a("p",[a("strong",[s._v("拥抱渐进增强")])]),s._v(" "),a("p",[a("strong",[s._v("不要传递字符串给”SetInterval”或”SetTimeOut”")])]),s._v(" "),a("p",[a("strong",[s._v("不要使用”With”语句")])]),s._v(" "),a("p",[a("strong",[s._v("使用{}而不是New Object()")])]),s._v(" "),a("p",[a("strong",[s._v("使用[]而不是New Array()")])]),s._v(" "),a("p",[a("strong",[s._v("一长串变量？省略”var”关键字，使用逗号替代")])]),s._v(" "),a("p",[a("strong",[s._v("始终，始终使用分号")])]),s._v(" "),a("p",[a("strong",[s._v("自执行函数(Self-Executing Functions)")])]),s._v(" "),a("p",[s._v("相比调用函数，当页面加载或调用父函数时，让函数自动执行会简单些。简单地将你的函数包装在圆括号内，并添加额外的一对圆括号，其本质上就调用了这个函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(functiondoSomething() {    return {        name: 'jeff',        lastName: 'way'    }; })();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("原始(raw)JavaScript代码的执行速度始终快于使用代码库")])]),s._v(" "),a("h2",{attrs:{id:"基本规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本规范"}},[s._v("#")]),s._v(" 基本规范")]),s._v(" "),a("ol",[a("li",[s._v("不要在同一行声明多个变量")]),s._v(" "),a("li",[s._v("使用 ===或!==来比较true/false或者数值")]),s._v(" "),a("li",[s._v("switch必须带有default分支")]),s._v(" "),a("li",[s._v("函数应该有返回值")]),s._v(" "),a("li",[s._v("for if else 必须使用大括号")]),s._v(" "),a("li",[s._v("语句结束加分号")]),s._v(" "),a("li",[s._v("命名要有意义，使用驼峰命名法")])])])}),[],!1,null,null,null);t.default=e.exports}}]);