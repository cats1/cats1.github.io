(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{441:function(s,n,e){"use strict";e.r(n);var a=e(42),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("ES是客户端脚本语言的规范，es5，es6是这个规范的不同版本。")]),s._v(" "),e("p",[s._v("JS是实现es5规范的客户端脚本语言。")]),s._v(" "),e("p",[s._v("typeScript是实现es6规范的客户端脚本语言。")]),s._v(" "),e("h2",{attrs:{id:"es5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es5"}},[s._v("#")]),s._v(" ES5")]),s._v(" "),e("p",[s._v("ES5 是我们大部分人用了很多年的语言。它的函数式编程特性非常好，或者说非常糟糕，取决于你怎么看它。 我个人喜欢用 ES5  编程。所有现代浏览器都支持它。它极度灵活，却也有着许多会导致应用程序崩溃的因素。为了保证我们的程序在IE5下不偏离正轨，我们需要作用域、闭包、立即执行的函数以及良好的逻辑。 尽管如此，它的灵活性也是我们大多数人依赖的一个优势。")]),s._v(" "),e("p",[s._v("作为ECMAScript第五个版本（第四版因为过于复杂废弃了），浏览器支持情况可看第一副图，增加特性如下。")]),s._v(" "),e("h3",{attrs:{id:"strict模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strict模式"}},[s._v("#")]),s._v(" strict模式")]),s._v(" "),e("p",[s._v("严格模式，限制一些用法，'use strict';")]),s._v(" "),e("h3",{attrs:{id:"array增加方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array增加方法"}},[s._v("#")]),s._v(" Array增加方法")]),s._v(" "),e("p",[s._v("增加了every、some 、forEach、filter 、indexOf、lastIndexOf、isArray、map、reduce、reduceRight方法")]),s._v(" "),e("p",[s._v("还有其他方法 Function.prototype.bind、String.prototype.trim、Date.now")]),s._v(" "),e("h3",{attrs:{id:"object方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object方法"}},[s._v("#")]),s._v(" Object方法")]),s._v(" "),e("p",[s._v("Object.getPrototypeOf")]),s._v(" "),e("p",[s._v("Object.create")]),s._v(" "),e("p",[s._v("Object.getOwnPropertyNames")]),s._v(" "),e("p",[s._v("Object.defineProperty")]),s._v(" "),e("p",[s._v("Object.getOwnPropertyDescriptor")]),s._v(" "),e("p",[s._v("Object.defineProperties")]),s._v(" "),e("p",[s._v("Object.keys")]),s._v(" "),e("p",[s._v("Object.preventExtensions / Object.isExtensible")]),s._v(" "),e("p",[s._v("Object.seal / Object.isSealed")]),s._v(" "),e("p",[s._v("Object.freeze / Object.isFrozen")]),s._v(" "),e("h2",{attrs:{id:"es6-es2015-的飞跃"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-es2015-的飞跃"}},[s._v("#")]),s._v(" ES6/ES2015 的飞跃")]),s._v(" "),e("p",[s._v("ECMAScript6在保证向下兼容的前提下，提供大量新特性，目前浏览器兼容情况如下：")]),s._v(" "),e("p",[s._v("ES2015 是 ES5 的巨大飞跃。它给 JavaScript 增加了非常多的特性。这些特性解决了 ES5 编程的一些挑战性问题。它们是可选的，因为我们依然可以在 ES2015 里使用 ES5 （包括函数）。")]),s._v(" "),e("p",[s._v("ES2015 的一些特性：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("块级作用域 关键字let, 常量const")])]),s._v(" "),e("li",[e("p",[s._v("对象字面量的属性赋值简写（property value shorthand）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function createCoord(x, y) {\n  return {\n    x: x,\n    y: y\n  }\n}\nfunction createCoord(x, y) {\n  return {\n    x,\n    y\n  }\n}\nconst math = {\n  add: function(a,b) { return a + b; },\n  sub: function(a,b) { return a - b; },\n  multiply: function(a,b) { return a * b; }\n}\nconst math = {\n  add: function(a,b) { return a + b; },\n  sub: function(a,b) { return a - b; },\n  multiply: function(a,b) { return a * b; }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("赋值解构")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('let singer = { first: "Bob", last: "Dylan" };\nlet { first: f, last: l } = singer; // 相当于 f = "Bob", l = "Dylan"\nlet [all, year, month, day] =  /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/.exec("2015-10-25");\nlet [x, y] = [1, 2, 3]; // x = 1, y = 2\nfunction doSomething({ a, b, c }) {\n  if(a) { ... }\n  if(b) { ... }\n  if(c) { ... }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("函数参数 - 默认值、参数打包、 数组展开（Default 、Rest 、Spread）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//Default\nfunction findArtist(name='lu', age='26') {\n    ...\n}\n//Rest\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\n//Spread\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// Pass each elem of array as argument\nf(...[1,2,3]) == 6\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("箭头函数 Arrow functions")]),s._v(" "),e("p",[s._v("(1).简化了"),e("a",{attrs:{href:"http://caibaojian.com/c/code",target:"_blank",rel:"noopener noreferrer"}},[s._v("代码"),e("OutboundLink")],1),s._v("形式，默认return表达式结果。")]),s._v(" "),e("p",[s._v("(2).自动绑定语义this，即定义函数时的this。如上面例子中，forEach的匿名函数参数中用到的this。")])]),s._v(" "),e("li",[e("p",[s._v("字符串模板 Template strings")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("`Hello ${name}, how are you ${time}?`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Class：Class，有constructor、extends、super，但本质上是语法糖（对语言的功能并没有影响，但是更方便"),e("a",{attrs:{href:"http://caibaojian.com/a-programmer/",target:"_blank",rel:"noopener noreferrer"}},[s._v("程序员"),e("OutboundLink")],1),s._v("使用）。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Artist {\n    constructor(name) {\n        this.name = name;\n    }\n    perform() {\n        return this.name + " performs ";\n    }\n}\nclass Singer extends Artist {\n    constructor(name, song) {\n        super.constructor(name);\n        this.song = song;\n    }\n    perform() {\n        return super.perform() + "[" + this.song + "]";\n    }\n}\nlet james = new Singer("Etta James", "At last");\njames instanceof Artist; // true\njames instanceof Singer; // true\njames.perform(); // "Etta James performs [At last]"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Iterators（迭代器）+ for..of")])]),s._v(" "),e("li",[e("p",[s._v("生成器 （Generators）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n}\nvar it = foo();\nvar message = it.next();//事实上每次调用next()方法都会返回一个object对象，其中的value属性就是yield表达式返回的值，而属性done是一个boolean类型，用来表示对generator函数的遍历是否已经结束。\nconsole.log(message); // { value:1, done:false }\nfor (var v of foo()) {\n    console.log( v );\n}\n// 1 2 3 4 5\n\nconsole.log( v ); // 仍然是5，而不是6\n\nfunction *foo(x) {\n    var y = 2 * (yield (x + 1));\n    var z = yield (y / 3);\n    return (x + y + z);\n}\n\nvar it = foo( 5 );\n\n// 注意这里在调用next()方法时没有传入任何值\nconsole.log( it.next() );       // { value:6, done:false }\nconsole.log( it.next( 12 ) );   // { value:8, done:false }\nconsole.log( it.next( 13 ) );   // { value:42, done:true }\n//表达式yield(x + 1)的返回值是6，然后第二个next(12)将12作为参数传入，用来代替表达式yield(x + 1)，因此变量y的值就是12 × 2,即24。随后的yield(y / 3)（即yield(24 / 3)）返回值8。然后第三个next(13)将13作为参数传入，用来代替表达式yield(y / 3)，所以变量z的值是13。最后，语句return (x + y + z)即return (5 + 24 + 13)，所以最终的返回值是42\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Modules")]),s._v(" "),e("p",[s._v("ES6的内置模块功能借鉴了CommonJS和AMD各自的优点：")]),s._v(" "),e("p",[s._v("(1).具有CommonJS的精简语法、唯一导出出口(single exports)和循环依赖(cyclic dependencies)的特点。")]),s._v(" "),e("p",[s._v("(2).类似AMD，支持异步加载和可配置的模块加载。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// lib/math.js\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n// app.js\nimport * as math from "lib/math";\nalert("2π = " + math.sum(math.pi, math.pi));\n// otherApp.js\nimport {sum, pi} from "lib/math";\nalert("2π = " + sum(pi, pi));\nModule Loaders:\n// Dynamic loading – ‘System’ is default loader\nSystem.import(\'lib/math\').then(function(m) {\n  alert("2π = " + m.sum(m.pi, m.pi));\n});\n// Directly manipulate module cache\nSystem.get(\'jquery\');\nSystem.set(\'jquery\', Module({$: $})); // WARNING: not yet finalized\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Map + Set + WeakMap + WeakSet")])]),s._v(" "),e("li",[e("p",[s._v("Math + Number + String + Array + Object APIs")])]),s._v(" "),e("li",[e("p",[s._v("Proxy")]),s._v(" "),e("p",[s._v("使用代理（Proxy）监听对象的操作，然后可以做一些相应事情。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var target = {};\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\nvar p = new Proxy(target, handler);\np.world === 'Hello, world!';\n//可监听的操作： get、set、has、deleteProperty、apply、construct、getOwnPropertyDescriptor、defineProperty、getPrototypeOf、setPrototypeOf、enumerate、ownKeys、preventExtensions、isExtensible。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Symbols")]),s._v(" "),e("p",[s._v("Symbol是一种基本类型。Symbol 通过调用symbol函数产生，它接收一个可选的名字参数，该函数返回的symbol是唯一的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var key = Symbol("key");\nvar key2 = Symbol("key");\nkey == key2  //false\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("Promise")]),s._v(" "),e("p",[s._v("Promises是处理异步操作的对象，使用了 Promise 对象之后可以用一种链式调用的方式来组织代码，让代码更加直观。")])]),s._v(" "),e("li",[e("p",[s._v("Array新增方法")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("find()")]),s._v("，查找列表中的成员，返回 null 表示没找到")]),s._v(" "),e("li",[e("code",[s._v("findIndex()")]),s._v("，查找列表成员的索引")]),s._v(" "),e("li",[e("code",[s._v("some()")]),s._v("，检查某个断言是否至少在列表的一个成员上为真")]),s._v(" "),e("li",[e("code",[s._v("includes")]),s._v("，列表是否包含某项")])])]),s._v(" "),e("li",[e("p",[s._v("async/await")])]),s._v(" "),e("li")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("箭头函数")])]),s._v(" "),e("li",[e("p",[s._v("类型")])]),s._v(" "),e("li",[e("p",[s._v("增强的对象字面量")])]),s._v(" "),e("li",[e("p",[s._v("模板字符串")])]),s._v(" "),e("li",[e("p",[s._v("解构")])]),s._v(" "),e("li",[e("p",[s._v("默认参数")])]),s._v(" "),e("li",[e("p",[s._v("剩余参数 + 展开")])]),s._v(" "),e("li",[e("p",[s._v("let + const")])]),s._v(" "),e("li",[e("p",[s._v("iterators + for..of")])]),s._v(" "),e("li",[e("p",[s._v("generators")])]),s._v(" "),e("li",[e("p",[s._v("unicode")])]),s._v(" "),e("li",[e("p",[s._v("modules")])]),s._v(" "),e("li",[e("p",[s._v("module loaders")])]),s._v(" "),e("li",[e("p",[s._v("map + set + weakmap + weakset")])]),s._v(" "),e("li",[e("p",[s._v("proxies")])]),s._v(" "),e("li",[e("p",[s._v("symbols")])]),s._v(" "),e("li",[e("p",[s._v("subclassable  built-ins")])]),s._v(" "),e("li",[e("p",[s._v("promises")])]),s._v(" "),e("li",[e("p",[s._v("math + number + string + array + object APIs")])]),s._v(" "),e("li",[e("p",[s._v("binary and octal literals")])]),s._v(" "),e("li",[e("p",[s._v("reflect api")])]),s._v(" "),e("li",[e("p",[s._v("tail calls")])])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Node.js"),e("OutboundLink")],1),s._v(" 是基于现代版本的 V8 引擎构建的。Node 已经实现了 ES2015 的很多特性。")]),s._v(" "),e("h3",{attrs:{id:"支持-es5-浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持-es5-浏览器"}},[s._v("#")]),s._v(" 支持 ES5 浏览器")]),s._v(" "),e("p",[s._v("我们怎样在还不支持 ES2015 的浏览器上运行 ES2015？ 我们可以使用 ES2015， 然后用"),e("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Babel 之类的工具"),e("OutboundLink")],1),s._v("转换成 ES5。Babel 让书写 ES2015（还有未来的 ES2016 或更高）变得容易，仍然会编译成更旧版本的 JavaScript。非常酷！")]),s._v(" "),e("h2",{attrs:{id:"typescript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[s._v("#")]),s._v(" TypeScript")]),s._v(" "),e("p",[s._v("TypeScript 的价值不在于写更少的代码。TypeScript 的价值在于写更安全的代码。长远地看，它帮助我们更高效地编码，因为我们利用了工具来发现问题，以及自动填充参数、属性、函数和更多（通常被称为自动完成和智能感知）。")]),s._v(" "),e("p",[s._v("那么 TypeScript 比 ES2015 更好的地方在哪？我会集中在我觉得增加了最多价值的三个主要方面：")]),s._v(" "),e("ol",[e("li",[s._v("类型")]),s._v(" "),e("li",[s._v("接口")]),s._v(" "),e("li",[s._v("未来的 ES2016+ 特性 (比如 Annotations/Decorators and async/await)")])]),s._v(" "),e("p",[s._v("TypeScript 是 ES 加上如下的特性：")]),s._v(" "),e("p",[s._v("类型和接口帮助提供它需要的工具，以便在我们输入的时候发现问题。有了这些特性，我们的编辑器就不必要猜测我们是否正确地使用了某个函数。工具有了这个信息，就很容易显示一个红旗，我们就可以马上解决问题。在有些情况下，这些工具也可以给我们推荐，帮我们重构！")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5334394-e7568847c6096444.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/442",alt:"img"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);